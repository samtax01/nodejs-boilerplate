[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/bin/index.js",
    "content": "import '@babel/register';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport { runCommand, getCommandAndArgvFromCli } from '../lib/commands/helpers';\nimport { exit } from '../lib/utils/helpers';\n\n/**\n * Main entry point, run md-seed cli\n * @return {Promise}\n */\nconst run = async () => {\n  try {\n    // recive the command and the arguments input from the cli\n    const { command, argv } = getCommandAndArgvFromCli();\n\n    // run the cli command\n    await runCommand(command, argv);\n\n    exit();\n  } catch (error) {\n    exit(error);\n  }\n};\n\nrun();\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/bin/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "run",
    "memberof": "src/bin/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/bin/index.js~run",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/bin/index.js",
    "importStyle": null,
    "description": "Main entry point, run md-seed cli",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/lib/commands/constants.js",
    "content": "import generate from './generate';\nimport help from './help';\nimport init from './init';\nimport run from './run';\n\n/**\n * Available command names\n *\n * Map command key to command name\n * @type {Map<string, string>}\n */\nexport const commands = {\n  GENERATE: 'generate',\n  HELP: 'help',\n  INIT: 'init',\n  RUN: 'run',\n};\n\n/**\n * Available command aliases\n *\n * Map alias to command name\n * @type {Map<string, string>}\n */\nexport const aliases = {\n  g: commands.GENERATE,\n  h: commands.HELP,\n};\n\n/**\n * All available command names as list (includes aliases)\n * @type {string[]}\n */\nexport const availableCommandsList = [\n  null, // no command should run help\n  ...Object.values(commands),\n  ...Object.keys(aliases),\n];\n\n/**\n * Commands map\n *\n * Map command name to the actuall command function\n * @type {Map<string, Function>}\n */\nexport const commandsMap = {\n  [commands.GENERATE]: generate,\n  [commands.HELP]: help,\n  [commands.INIT]: init,\n  [commands.RUN]: run,\n};\n\n/**\n * The fefault command name\n * @type {string}\n */\nexport const defaultCommand = commands.HELP;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "commands",
    "memberof": "src/lib/commands/constants.js",
    "static": true,
    "longname": "src/lib/commands/constants.js~commands",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/constants.js",
    "importStyle": "{commands}",
    "description": "Available command names\n\nMap command key to command name",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "aliases",
    "memberof": "src/lib/commands/constants.js",
    "static": true,
    "longname": "src/lib/commands/constants.js~aliases",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/constants.js",
    "importStyle": "{aliases}",
    "description": "Available command aliases\n\nMap alias to command name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "availableCommandsList",
    "memberof": "src/lib/commands/constants.js",
    "static": true,
    "longname": "src/lib/commands/constants.js~availableCommandsList",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/constants.js",
    "importStyle": "{availableCommandsList}",
    "description": "All available command names as list (includes aliases)",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "commandsMap",
    "memberof": "src/lib/commands/constants.js",
    "static": true,
    "longname": "src/lib/commands/constants.js~commandsMap",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/constants.js",
    "importStyle": "{commandsMap}",
    "description": "Commands map\n\nMap command name to the actuall command function",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "defaultCommand",
    "memberof": "src/lib/commands/constants.js",
    "static": true,
    "longname": "src/lib/commands/constants.js~defaultCommand",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/constants.js",
    "importStyle": "{defaultCommand}",
    "description": "The fefault command name",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/lib/commands/generate/generate-seeder.js",
    "content": "import chalk from 'chalk';\n\nimport { SeederGenerator } from '../../core';\nimport { validateUserConfig } from '../../utils/helpers';\nimport config from '../../config';\n\n/**\n * Generate a new seeder.\n * @param  {string}  name seeder name\n * @return {Promise}\n */\nconst generateSeeder = async name => {\n  validateUserConfig();\n\n  const { seederTemplate, userSeedersFolderPath } = config;\n\n  const generator = new SeederGenerator({\n    name,\n    seederTemplate,\n    userSeedersFolderPath,\n  });\n\n  const generatedSeederFile = await generator.generate();\n\n  console.log(`${chalk.green('CREATED')} ${generatedSeederFile}`);\n};\n\nexport default generateSeeder;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/generate-seeder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "generateSeeder",
    "memberof": "src/lib/commands/generate/generate-seeder.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/generate/generate-seeder.js~generateSeeder",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/generate-seeder.js",
    "importStyle": "generateSeeder",
    "description": "Generate a new seeder.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "seeder name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/lib/commands/generate/generate-seeder.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport generateSeeder, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './generate-seeder';\n\nconst helpData = {\n  name: 'name',\n  seederTemplate: 'template',\n  userSeedersFolderPath: 'path/to/seeders',\n};\n\ntest.beforeEach('mock imports', t => {\n  const { seederTemplate, userSeedersFolderPath } = helpData;\n\n  const mocks = {\n    validateUserConfig: sinon.stub(),\n    SeederGenerator: sinon.stub(),\n    config: { seederTemplate, userSeedersFolderPath },\n  };\n\n  mocks.SeederGenerator.prototype.generate = sinon\n    .stub()\n    .resolves('some.seeder.js');\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n\n  sinon.stub(console, 'log');\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n\n  console.log.restore();\n});\n\ntest('should generate a seeder', async t => {\n  const { validateUserConfig, SeederGenerator } = t.context.mocks;\n  await generateSeeder(helpData.name);\n\n  t.true(validateUserConfig.called);\n  t.true(SeederGenerator.calledWith(helpData));\n  t.true(SeederGenerator.prototype.generate.called);\n  t.true(console.log.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/generate-seeder.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/commands/generate/generate-seeder.test.js",
    "static": true,
    "longname": "src/lib/commands/generate/generate-seeder.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/generate-seeder.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"seederTemplate\": string, \"userSeedersFolderPath\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/lib/commands/generate/help.js",
    "content": "import usageGuide from './usage-guide';\n\n/**\n * Prints the generate command user-guide\n */\nconst help = () => console.log(usageGuide);\n\nexport default help;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/help.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "help",
    "memberof": "src/lib/commands/generate/help.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/generate/help.js~help",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/help.js",
    "importStyle": "help",
    "description": "Prints the generate command user-guide",
    "lineNumber": 6,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/lib/commands/generate/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/help.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/lib/commands/generate/index.js",
    "content": "import { getOptions } from './options';\nimport help from './help';\nimport generateSeeder from './generate-seeder';\n\n/**\n * mongoose-data-seed generate command\n * @param  {stringp[]}  argv cli arguments\n * @return {Promise}\n */\nexport default async argv => {\n  const { seederName, helpWanted } = getOptions(argv);\n\n  if (helpWanted) return help();\n\n  await generateSeeder(seederName);\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "index",
    "memberof": "src/lib/commands/generate/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/generate/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/index.js",
    "importStyle": "index",
    "description": "mongoose-data-seed generate command",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "stringp[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/lib/commands/generate/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport generate, { __RewireAPI__ as moduleRewireAPI } from './index';\n\nconst helpData = { argv: 'some argv', seederName: 'some-seeder-name' };\n\ntest.beforeEach('create stubs', t => {\n  const stubs = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    generateSeeder: sinon.stub(),\n  };\n\n  Object.keys(stubs).forEach(methodName =>\n    moduleRewireAPI.__Rewire__(methodName, stubs[methodName])\n  );\n\n  t.context = { stubs };\n});\n\ntest.afterEach.always('restore stubs', t => {\n  const { stubs } = t.context;\n\n  Object.keys(stubs).forEach(methodName =>\n    moduleRewireAPI.__ResetDependency__(methodName)\n  );\n});\n\ntest.serial('should show help when asking for help', async t => {\n  const { argv } = helpData;\n  const { getOptions, help, generateSeeder } = t.context.stubs;\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await generate(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(generateSeeder.called);\n});\n\ntest.serial('should generate seeder when asking with seeder-name', async t => {\n  const { argv, seederName } = helpData;\n  const { getOptions, help, generateSeeder } = t.context.stubs;\n\n  getOptions.withArgs(argv).returns({ seederName });\n\n  await generate(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(generateSeeder.calledWith(seederName));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/index.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/commands/generate/index.test.js",
    "static": true,
    "longname": "src/lib/commands/generate/index.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/index.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"argv\": string, \"seederName\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/lib/commands/generate/option-definitions.js",
    "content": "/**\n * Generate command option defenitions\n * @type {Object[]}\n */\nconst optionDefinitions = [\n  {\n    name: 'name',\n    alias: 'n',\n    type: String,\n    defaultOption: true,\n    typeLabel: 'name',\n    description: 'Seeder name to generate',\n  },\n  {\n    name: 'help',\n    alias: 'h',\n    type: Boolean,\n    defaultValue: false,\n    description: 'Show usage guide',\n  },\n];\n\nexport default optionDefinitions;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/option-definitions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "optionDefinitions",
    "memberof": "src/lib/commands/generate/option-definitions.js",
    "static": true,
    "longname": "src/lib/commands/generate/option-definitions.js~optionDefinitions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/option-definitions.js",
    "importStyle": "optionDefinitions",
    "description": "Generate command option defenitions",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/lib/commands/generate/options.js",
    "content": "import commandLineArgs from 'command-line-args';\nimport chalk from 'chalk';\nimport { trim } from 'lodash';\n\nimport help from './help';\nimport optionDefinitions from './option-definitions';\n\n/**\n * Get generate options from argv\n * @param    {string[]} argv              cli argv\n * @return   {Object}                     run options\n * @property {string}   seederName\n * @property {boolean}  helpWanted\n */\nexport const getOptions = argv => {\n  const { name: seederName, help: helpWanted } = commandLineArgs(\n    optionDefinitions,\n    { argv }\n  );\n\n  const options = { seederName, helpWanted };\n\n  validateOptions(options);\n\n  return options;\n};\n\n/**\n * Validate generate command options\n * @param  {Object}  [options={}]       Options\n * @param  {string}  options.seederName seeder name to generate\n * @param  {boolean} options.helpWanted help wanted?\n * @throws {Error} throw error when options are not valid.\n */\nexport const validateOptions = ({ seederName, helpWanted } = {}) => {\n  if (\n    !helpWanted &&\n    (typeof seederName !== 'string' || trim(seederName).length < 3)\n  ) {\n    console.log(`${chalk.red('ERROR')} Please choose a seeder name`);\n    console.log();\n    help();\n\n    throw new Error('exit');\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "getOptions",
    "memberof": "src/lib/commands/generate/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/generate/options.js~getOptions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/options.js",
    "importStyle": "{getOptions}",
    "description": "Get generate options from argv",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli argv"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seederName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "helpWanted",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "run options"
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "validateOptions",
    "memberof": "src/lib/commands/generate/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/generate/options.js~validateOptions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/options.js",
    "importStyle": "{validateOptions}",
    "description": "Validate generate command options",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.seederName",
        "description": "seeder name to generate"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.helpWanted",
        "description": "help wanted?"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throw error when options are not valid."
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/lib/commands/generate/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  getOptions,\n  validateOptions,\n  __RewireAPI__ as moduleRewireAPI,\n} from './options';\n\nconst helpData = {\n  argv: 'some argv',\n  seederName: 'some-seeder-name',\n  optionDefinitions: 'some option definitions',\n};\n\ntest('should get user options from the cli', t => {\n  const createStubs = ({ commandLineArgs, optionDefinitions }) => {\n    moduleRewireAPI.__Rewire__('commandLineArgs', commandLineArgs);\n    moduleRewireAPI.__Rewire__('optionDefinitions', optionDefinitions);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('commandLineArgs');\n    moduleRewireAPI.__ResetDependency__('optionDefinitions');\n  };\n\n  const { argv, optionDefinitions, seederName } = helpData;\n\n  const commandLineArgs = sinon\n    .stub()\n    .withArgs(optionDefinitions, { argv })\n    .returns({ name: seederName, help: false });\n\n  createStubs({ commandLineArgs, optionDefinitions });\n\n  const expectedOptions = { seederName, helpWanted: false };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n\n  restoreStubs();\n});\n\ntest('should validate given options', t => {\n  const createStubs = ({ help }) => {\n    moduleRewireAPI.__Rewire__('help', help);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('help');\n    console.log.restore();\n  };\n\n  const help = sinon.stub();\n\n  createStubs({ help });\n\n  t.throws(() => validateOptions());\n  t.true(help.called);\n  t.true(console.log.called);\n  t.throws(() => validateOptions({ helpWanted: false }));\n  t.throws(() => validateOptions({ seederName: 'ab' }));\n  t.notThrows(() => validateOptions({ seederName: 'abc' }));\n  t.notThrows(() => validateOptions({ seederName: 'ab', helpWanted: true }));\n  t.notThrows(() => validateOptions({ helpWanted: true }));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/options.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/commands/generate/options.test.js",
    "static": true,
    "longname": "src/lib/commands/generate/options.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/options.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"argv\": string, \"seederName\": string, \"optionDefinitions\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/lib/commands/generate/usage-guide.js",
    "content": "import generateUsageGuide from 'command-line-usage';\nimport optionDefinitions from './option-definitions';\n\n/**\n * @private\n */\nconst usageGuide = generateUsageGuide([\n  {\n    header: 'Generate Seeder',\n    content: 'Generate new seeder file into the seeder folder.',\n  },\n  {\n    header: 'Synopsis',\n    content: [\n      '$ md-seed generate {underline seeder-name}',\n      '$ md-seed g {underline seeder-name}',\n      '$ md-seed g {bold --help}',\n    ],\n  },\n  {\n    header: 'Options',\n    optionList: optionDefinitions,\n  },\n]);\n\nexport default usageGuide;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/usage-guide.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "usageGuide",
    "memberof": "src/lib/commands/generate/usage-guide.js",
    "static": true,
    "longname": "src/lib/commands/generate/usage-guide.js~usageGuide",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/generate/usage-guide.js",
    "importStyle": "usageGuide",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/lib/commands/help/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport usageGuide from './usage-guide';\nimport help from './index';\n\ntest('help command should print the usage guide', async t => {\n  sinon.stub(console, 'log');\n\n  await help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  console.log.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/help/help.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/lib/commands/help/index.js",
    "content": "import usageGuide from './usage-guide';\n\n/**\n * Prints the help\n */\nconst help = async () => {\n  console.log(usageGuide);\n};\n\nexport default help;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/help/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "help",
    "memberof": "src/lib/commands/help/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/help/index.js~help",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/help/index.js",
    "importStyle": "help",
    "description": "Prints the help",
    "lineNumber": 6,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/lib/commands/help/usage-guide.js",
    "content": "import generateUsageGuide from 'command-line-usage';\n\n/**\n * Help command user guide\n * @type {string}\n */\nconst usageGuide = generateUsageGuide([\n  {\n    header: 'Mongoose Data Seeder',\n    content: 'Seed data into the database',\n  },\n  {\n    header: 'Synopsis',\n    content: ['$ md-seed <command> <options>'],\n  },\n  {\n    header: 'Command List',\n    content: [\n      {\n        command: 'init',\n        description: 'Install mongoose-data-seed into your project.',\n      },\n      {\n        command: 'g, generate',\n        description: 'Generate new seeder file into the seeder folder.',\n      },\n      {\n        command: 'run',\n        description: 'Run seeders.',\n      },\n      {\n        command: 'h, help',\n        description: 'Show help',\n      },\n    ],\n  },\n]);\n\nexport default usageGuide;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/help/usage-guide.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "usageGuide",
    "memberof": "src/lib/commands/help/usage-guide.js",
    "static": true,
    "longname": "src/lib/commands/help/usage-guide.js~usageGuide",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/help/usage-guide.js",
    "importStyle": "usageGuide",
    "description": "Help command user guide",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/lib/commands/helpers.js",
    "content": "import commandLineCommands from 'command-line-commands';\nimport {\n  commandsMap,\n  aliases,\n  defaultCommand,\n  availableCommandsList,\n} from './constants';\n\n/**\n * Whether a given command is an alias\n * @param  {string}  command\n * @return {Boolean}\n */\nexport const isAlias = command => Object.keys(aliases).includes(command);\n\n/**\n * Get the command name of a given alias\n * @param  {string} alias\n * @return {string}\n */\nexport const aliasToCommand = alias => aliases[alias];\n\n/**\n * Get the function of a given command\n * @param  {string}   command command name\n * @return {Function} command function\n */\nexport const commandToFunction = command => {\n  command = command || defaultCommand;\n\n  if (isAlias(command)) {\n    command = aliasToCommand(command);\n  }\n\n  return commandsMap[command];\n};\n\n/**\n * Get the command and the arguments from the cli\n * @return   {Object}\n * @property {string}   command command name\n * @property {string[]} argv    command arguments\n */\nexport const getCommandAndArgvFromCli = () => {\n  const { command, argv } = commandLineCommands(availableCommandsList);\n\n  return { command, argv };\n};\n\n/**\n * Run command\n * @param  {string} command command name\n * @param  {string} argv    command arguments\n */\nexport const runCommand = (command, argv) => {\n  const commandFunction = commandToFunction(command);\n\n  return commandFunction(argv);\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "isAlias",
    "memberof": "src/lib/commands/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/helpers.js~isAlias",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/helpers.js",
    "importStyle": "{isAlias}",
    "description": "Whether a given command is an alias",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "aliasToCommand",
    "memberof": "src/lib/commands/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/helpers.js~aliasToCommand",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/helpers.js",
    "importStyle": "{aliasToCommand}",
    "description": "Get the command name of a given alias",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "alias",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "commandToFunction",
    "memberof": "src/lib/commands/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/helpers.js~commandToFunction",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/helpers.js",
    "importStyle": "{commandToFunction}",
    "description": "Get the function of a given command",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "command name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "command function"
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "getCommandAndArgvFromCli",
    "memberof": "src/lib/commands/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/helpers.js~getCommandAndArgvFromCli",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/helpers.js",
    "importStyle": "{getCommandAndArgvFromCli}",
    "description": "Get the command and the arguments from the cli",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "command name"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "command arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "runCommand",
    "memberof": "src/lib/commands/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/helpers.js~runCommand",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/helpers.js",
    "importStyle": "{runCommand}",
    "description": "Run command",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "command name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "command arguments"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/lib/commands/helpers.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { aliases, commands, commandsMap, defaultCommand } from './constants';\nimport {\n  isAlias,\n  aliasToCommand,\n  commandToFunction,\n  runCommand,\n  getCommandAndArgvFromCli,\n  __RewireAPI__ as moduleRewireAPI,\n} from './helpers';\n\ntest.serial('isAlias should work', t => {\n  Object.keys(aliases).forEach(a => t.is(isAlias(a), true));\n  Object.keys(commands).forEach(c => t.is(isAlias(c), false));\n\n  t.is(isAlias(), false);\n});\n\ntest.serial('aliasToCommand should work', t => {\n  for (const [alias, command] of Object.entries(aliases)) {\n    t.is(aliasToCommand(alias), command);\n  }\n});\n\ntest.serial('commandToFunction should work', t => {\n  for (const [command, func] of Object.entries(commandsMap)) {\n    t.is(commandToFunction(command), func);\n  }\n\n  for (const [alias, command] of Object.entries(aliases)) {\n    t.is(commandToFunction(alias), commandToFunction(command));\n  }\n\n  t.is(commandToFunction(), commandToFunction(defaultCommand));\n});\n\ntest.serial('should get command and argv from cli', t => {\n  const shouldReturn = { command: 'command', argv: 'argv' };\n  const stub = sinon.stub().returns(shouldReturn);\n\n  moduleRewireAPI.__Rewire__('commandLineCommands', stub);\n\n  const result = getCommandAndArgvFromCli();\n\n  t.true(stub.called);\n  t.deepEqual(result, shouldReturn);\n\n  moduleRewireAPI.__ResetDependency__('commandLineCommands');\n});\n\ntest.serial('runCommand should work', t => {\n  const spy = sinon.spy();\n  const stub = sinon\n    .stub()\n    .withArgs('help')\n    .returns(spy);\n\n  moduleRewireAPI.__Rewire__('commandToFunction', stub);\n\n  runCommand('help', 'some args...');\n\n  t.true(stub.calledWith('help'));\n  t.true(spy.calledWith('some args...'));\n\n  moduleRewireAPI.__ResetDependency__('commandToFunction');\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/helpers.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/lib/commands/init/help.js",
    "content": "import usageGuide from './usage-guide';\n\n/**\n * Prints the install command user-guide\n */\nconst help = () => console.log(usageGuide);\n\nexport default help;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/help.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "help",
    "memberof": "src/lib/commands/init/help.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/init/help.js~help",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/help.js",
    "importStyle": "help",
    "description": "Prints the install command user-guide",
    "lineNumber": 6,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/lib/commands/init/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/help.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/lib/commands/init/index.js",
    "content": "import { getOptions } from './options';\nimport help from './help';\nimport runInstaller from './run-installer';\n\n/**\n * mongoose-data-seed init command\n * @param  {stringp[]}  argv cli arguments\n * @return {Promise}\n */\nexport default async argv => {\n  const { helpWanted, ...options } = getOptions(argv);\n\n  if (helpWanted) return help();\n\n  return runInstaller(options);\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "index",
    "memberof": "src/lib/commands/init/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/index.js",
    "importStyle": "index",
    "description": "mongoose-data-seed init command",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "stringp[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/lib/commands/init/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport init, { __RewireAPI__ as moduleRewireAPI } from './index';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    runInstaller: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should show help', async t => {\n  const { getOptions, help, runInstaller } = t.context.mocks;\n\n  const argv = 'some-argv';\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await init(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(runInstaller.called);\n});\n\ntest.serial('should run installer', async t => {\n  const { getOptions, help, runInstaller } = t.context.mocks;\n\n  const argv = 'some-argv';\n  const options = { some: 'options' };\n\n  getOptions.withArgs(argv).returns(options);\n\n  await init(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(runInstaller.calledWith(options));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/index.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/lib/commands/init/installer-logger.js",
    "content": "import chalk from 'chalk';\n\nimport BaseLogger from '../../utils/base-logger';\nimport { Installer } from '../../core';\n\n/**\n * Installer Logger\n */\nexport default class InstallerLogger extends BaseLogger {\n  /**\n   * Log next notification\n   * @param  {Object} notification notification to log\n   * @param  {string} notification.type    operation type\n   * @param  {Object} notification.payload operation payload\n   */\n  next({ type, payload }) {\n    switch (type) {\n      case Installer.operations.WRITE_USER_GENERETOR_CONFIG_SUCCESS:\n        console.log(`${chalk.green('UPDATED')} package.json`);\n        break;\n\n      case Installer.operations\n        .CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS:\n        console.log(\n          `${chalk.yellow('SKIP')} ${\n            payload.customSeederTemplateFilename\n          } are already exists`\n        );\n        break;\n      case Installer.operations.CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS:\n        console.log(\n          `${chalk.green('CREATED')} ${payload.customSeederTemplateFilename}`\n        );\n        break;\n\n      case Installer.operations.CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS:\n        console.log(\n          `${chalk.yellow('SKIP')} ${payload.foldername} are already exists`\n        );\n        break;\n      case Installer.operations.CREATE_SEEDERS_FOLDER_SUCCESS:\n        console.log(`${chalk.green('CREATED')} ${payload.foldername}`);\n        break;\n\n      case Installer.operations.WRITE_USER_CONFIG_SKIP_FILE_EXISTS:\n        console.log(\n          `${chalk.yellow('SKIP')} ${payload.filename} are already exists`\n        );\n        break;\n      case Installer.operations.WRITE_USER_CONFIG_SUCCESS:\n        console.log(`${chalk.green('CREATED')} ${payload.filename}`);\n        break;\n    }\n  }\n\n  /**\n   * Log error\n   * @param  {Object} error         error to log\n   * @param  {string} error.type    error type\n   * @param  {Object} error.payload error payload\n   */\n  error({ type, payload }) {\n    switch (type) {\n      case Installer.operations.WRITE_USER_GENERETOR_CONFIG_ERROR:\n        console.log(\n          `${chalk.red('ERROR')} Unable to write config file: ${chalk.gray(\n            payload.filepath\n          )}`\n        );\n        break;\n\n      case Installer.operations.CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR:\n        console.log(\n          `${chalk.red(\n            'ERROR'\n          )} Unable to create custom seeder template: ${chalk.gray(\n            payload.customSeederTemplatePath\n          )}`\n        );\n        break;\n\n      case Installer.operations.CREATE_SEEDERS_FOLDER_ERROR:\n        console.log(\n          `${chalk.red('ERROR')} Unable to create seeders folder: ${chalk.gray(\n            payload.folderpath\n          )}`\n        );\n        break;\n\n      case Installer.operations.WRITE_USER_CONFIG_ERROR:\n        console.log(\n          `${chalk.red('ERROR')} Unable to write user config file: ${chalk.gray(\n            payload.filepath\n          )}`\n        );\n        break;\n    }\n\n    if (payload && payload.error) console.error(payload.error);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/installer-logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "InstallerLogger",
    "memberof": "src/lib/commands/init/installer-logger.js",
    "static": true,
    "longname": "src/lib/commands/init/installer-logger.js~InstallerLogger",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/installer-logger.js",
    "importStyle": "InstallerLogger",
    "description": "Installer Logger",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/lib/utils/base-logger.js~BaseLogger"
    ]
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "next",
    "memberof": "src/lib/commands/init/installer-logger.js~InstallerLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/commands/init/installer-logger.js~InstallerLogger#next",
    "access": "public",
    "description": "Log next notification",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": "notification to log"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "notification.type",
        "description": "operation type"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification.payload",
        "description": "operation payload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "error",
    "memberof": "src/lib/commands/init/installer-logger.js~InstallerLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/commands/init/installer-logger.js~InstallerLogger#error",
    "access": "public",
    "description": "Log error",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error to log"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error.type",
        "description": "error type"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error.payload",
        "description": "error payload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/lib/commands/init/installer-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport InstallerLogger from './installer-logger';\n\nconst createMockedLogger = () => {\n  return new InstallerLogger();\n};\n\ntest.beforeEach('mock', t => {\n  sinon.stub(global.console, 'error');\n  sinon.stub(global.console, 'log');\n});\n\ntest.afterEach.always('unmock', t => {\n  global.console.error.restore();\n  global.console.log.restore();\n});\n\ntest.serial('Should create a installer-logger instance', t => {\n  const logger = new InstallerLogger();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest.serial('Should return observer', t => {\n  const logger = new InstallerLogger();\n\n  const observer = logger.asObserver();\n\n  t.is(typeof observer.next, 'function');\n  t.is(typeof observer.error, 'function');\n});\n\ntest.serial('Should log WRITE_USER_GENERETOR_CONFIG_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_GENERETOR_CONFIG_SUCCESS';\n  logger.next({ type });\n\n  t.true(global.console.log.calledWith(sinon.match(/UPDATED/)));\n  t.true(global.console.log.calledWith(sinon.match(/package.json/)));\n});\n\ntest.serial(\n  'Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n  t => {\n    const logger = createMockedLogger();\n\n    const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS';\n    const payload = { customSeederTemplateFilename: 'some-filename' };\n\n    logger.next({ type, payload });\n\n    t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n    t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n    t.true(\n      global.console.log.calledWith(\n        sinon.match(payload.customSeederTemplateFilename)\n      )\n    );\n  }\n);\n\ntest.serial('Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS';\n  const payload = { customSeederTemplateFilename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(payload.customSeederTemplateFilename)\n    )\n  );\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS';\n  const payload = { foldername: 'some-foldername' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n  t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.foldername)));\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_SUCCESS';\n  const payload = { foldername: 'some-foldername' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.foldername)));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_SKIP_FILE_EXISTS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS';\n  const payload = { filename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n  t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.filename)));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_SUCCESS';\n  const payload = { filename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.filename)));\n});\n\ntest.serial('Should log WRITE_USER_GENERETOR_CONFIG_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_GENERETOR_CONFIG_ERROR';\n  const payload = { error: 'some-error', filepath: 'some-filepath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(sinon.match(/Unable to write config file/))\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.filepath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR';\n  const payload = {\n    error: 'some-error',\n    customSeederTemplatePath: 'some-filename',\n  };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to create custom seeder template/)\n    )\n  );\n  t.true(\n    global.console.log.calledWith(sinon.match(payload.customSeederTemplatePath))\n  );\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_ERROR';\n  const payload = { error: 'some-error', folderpath: 'some-folderpath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to create seeders folder/)\n    )\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.folderpath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_ERROR';\n  const payload = { error: 'some-error', filepath: 'some-filepath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to write user config file/)\n    )\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.filepath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log error', t => {\n  const logger = createMockedLogger();\n\n  const payload = { error: 'some-error' };\n\n  logger.error({ type: 'some-type', payload });\n\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log error without inner error', t => {\n  const logger = createMockedLogger();\n\n  const payload = {};\n\n  logger.error({ type: 'some-type', payload });\n\n  t.false(global.console.error.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/installer-logger.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "createMockedLogger",
    "memberof": "src/lib/commands/init/installer-logger.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/init/installer-logger.test.js~createMockedLogger",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/init/installer-logger.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/lib/commands/init/option-definitions.js",
    "content": "/**\n * Init command option defenitions\n * @type {Object[]}\n */\nconst optionDefinitions = [\n  {\n    name: 'seedersFolder',\n    alias: 'f',\n    type: String,\n    description: 'Seeders folder name',\n  },\n  {\n    name: 'seederTemplate',\n    alias: 't',\n    type: String,\n    description: 'Seeder template file path',\n  },\n  {\n    name: 'help',\n    alias: 'h',\n    type: Boolean,\n    defaultValue: false,\n    description: 'Show usage guide',\n  },\n];\n\nexport default optionDefinitions;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/option-definitions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "optionDefinitions",
    "memberof": "src/lib/commands/init/option-definitions.js",
    "static": true,
    "longname": "src/lib/commands/init/option-definitions.js~optionDefinitions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/option-definitions.js",
    "importStyle": "optionDefinitions",
    "description": "Init command option defenitions",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/lib/commands/init/options.js",
    "content": "import commandLineArgs from 'command-line-args';\n\nimport {\n  validateSeedersFolderName,\n  validateSeederTemplatePath,\n} from '../../utils/helpers';\nimport { promptSeedersFolder, promptSeederTemplate } from './prompts';\nimport optionDefinitions from './option-definitions';\n\n/**\n * Get init options from argv\n * @param    {string[]} argv              cli argv\n * @return   {Object}                     init options\n * @property {string}   seedersFolder\n * @property {string}   customSeederTemplate\n * @property {boolean}  helpWanted\n */\nexport const getOptions = argv => {\n  const {\n    seedersFolder,\n    seederTemplate: customSeederTemplate,\n    help: helpWanted,\n  } = commandLineArgs(optionDefinitions, { argv });\n\n  return { seedersFolder, customSeederTemplate, helpWanted };\n};\n\n/**\n * Prompt missing options for init command\n * @param  {Object}  [options={}]                 Init command options\n * @param  {[type]}  options.seedersFolder        seeders folder\n * @param  {[type]}  options.customSeederTemplate custom seeder template\n * @return {Promise} Options without missing\n */\nexport const promptMissingOptions = async ({\n  seedersFolder,\n  customSeederTemplate,\n} = {}) => {\n  const getSeedersFolder = async () =>\n    validateSeedersFolderName(seedersFolder)\n      ? seedersFolder\n      : promptSeedersFolder();\n\n  const getCustomSeederTemplate = async () =>\n    validateSeederTemplatePath(customSeederTemplate)\n      ? customSeederTemplate\n      : promptSeederTemplate();\n\n  return {\n    seedersFolder: await getSeedersFolder(),\n    customSeederTemplate: await getCustomSeederTemplate(),\n  };\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "getOptions",
    "memberof": "src/lib/commands/init/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/init/options.js~getOptions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/options.js",
    "importStyle": "{getOptions}",
    "description": "Get init options from argv",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli argv"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seedersFolder",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "customSeederTemplate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "helpWanted",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "init options"
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "promptMissingOptions",
    "memberof": "src/lib/commands/init/options.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/options.js~promptMissingOptions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/options.js",
    "importStyle": "{promptMissingOptions}",
    "description": "Prompt missing options for init command",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Init command options"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.seedersFolder",
        "description": "seeders folder"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.customSeederTemplate",
        "description": "custom seeder template"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Options without missing"
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/lib/commands/init/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  getOptions,\n  promptMissingOptions,\n  __RewireAPI__ as moduleRewireAPI,\n} from './options';\n\nconst helpData = {\n  argv: 'some argv',\n  seedersFolder: 'folder-name',\n  seederTemplate: 'file-path.js',\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    optionDefinitions: 'some option definitions',\n    commandLineArgs: sinon.stub(),\n    validateSeedersFolderName: sinon.stub(),\n    validateSeederTemplatePath: sinon.stub(),\n    promptSeedersFolder: sinon.stub(),\n    promptSeederTemplate: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest('should get user options from the cli', t => {\n  const { argv, seedersFolder, seederTemplate } = helpData;\n\n  const { commandLineArgs, optionDefinitions } = t.context.mocks;\n\n  commandLineArgs\n    .withArgs(optionDefinitions, { argv })\n    .returns({ seedersFolder, seederTemplate, help: false });\n\n  const expectedOptions = {\n    seedersFolder,\n    customSeederTemplate: seederTemplate,\n    helpWanted: false,\n  };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n});\n\ntest.serial(\n  'promptMissingOptions should not prompt when suplying valid options',\n  async t => {\n    const { seedersFolder, seederTemplate } = helpData;\n    const options = { seedersFolder, customSeederTemplate: seederTemplate };\n\n    const {\n      validateSeedersFolderName,\n      validateSeederTemplatePath,\n      promptSeedersFolder,\n      promptSeederTemplate,\n    } = t.context.mocks;\n\n    validateSeedersFolderName.withArgs(seedersFolder).returns(true);\n    validateSeederTemplatePath.withArgs(seederTemplate).returns(true);\n\n    const results = await promptMissingOptions(options);\n\n    t.deepEqual(results, options);\n    t.true(validateSeedersFolderName.calledWith(seedersFolder));\n    t.true(validateSeederTemplatePath.calledWith(seederTemplate));\n    t.false(promptSeedersFolder.called);\n    t.false(promptSeederTemplate.called);\n  }\n);\n\ntest.serial(\n  'promptMissingOptions should prompt all when not supplying options',\n  async t => {\n    const { seedersFolder, seederTemplate } = helpData;\n    const expectedResults = {\n      seedersFolder,\n      customSeederTemplate: seederTemplate,\n    };\n\n    const {\n      validateSeedersFolderName,\n      validateSeederTemplatePath,\n      promptSeedersFolder,\n      promptSeederTemplate,\n    } = t.context.mocks;\n\n    validateSeedersFolderName.returns(false);\n    validateSeederTemplatePath.returns(false);\n    promptSeedersFolder.returns(seedersFolder);\n    promptSeederTemplate.returns(seederTemplate);\n\n    const results = await promptMissingOptions();\n\n    t.deepEqual(results, expectedResults);\n    t.true(validateSeedersFolderName.called);\n    t.true(validateSeederTemplatePath.called);\n    t.true(promptSeedersFolder.called);\n    t.true(promptSeederTemplate.called);\n  }\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/options.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/commands/init/options.test.js",
    "static": true,
    "longname": "src/lib/commands/init/options.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/init/options.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"argv\": string, \"seedersFolder\": string, \"seederTemplate\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/lib/commands/init/prompts.js",
    "content": "import inquirer from 'inquirer';\nimport { trim } from 'lodash';\n\nimport {\n  validateSeedersFolderName,\n  validateSeederTemplatePath,\n} from '../../utils/helpers';\n\n/**\n * @private\n */\nexport const promptSeedersFolder = async () => {\n  const { seedersFolderName } = await inquirer.prompt([\n    {\n      name: 'seedersFolderName',\n      type: 'input',\n      message: 'Choose your seeders folder name',\n      default: './seeders',\n      filter: input => trim(input),\n      validate: input => validateSeedersFolderName(input),\n    },\n  ]);\n\n  return seedersFolderName;\n};\n\n/**\n * @private\n */\nexport const promptSeederTemplate = async () => {\n  const { useCustomSeeder } = await inquirer.prompt([\n    {\n      name: 'useCustomSeeder',\n      type: 'confirm',\n      message:\n        'Would you like to use your own custom template for your seeders?',\n      default: false,\n    },\n  ]);\n\n  if (!useCustomSeeder) {\n    return;\n  }\n\n  const { seederTemplatePath } = await inquirer.prompt([\n    {\n      name: 'seederTemplatePath',\n      type: 'input',\n      message: 'Choose a path for your seeder template',\n      default: './md-seed-template.ejs',\n      filter: input => trim(input),\n      validate: input => validateSeederTemplatePath(input),\n    },\n  ]);\n\n  return seederTemplatePath;\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/prompts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "promptSeedersFolder",
    "memberof": "src/lib/commands/init/prompts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/prompts.js~promptSeedersFolder",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/prompts.js",
    "importStyle": "{promptSeedersFolder}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "promptSeederTemplate",
    "memberof": "src/lib/commands/init/prompts.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/prompts.js~promptSeederTemplate",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/prompts.js",
    "importStyle": "{promptSeederTemplate}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/lib/commands/init/prompts.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  promptSeedersFolder,\n  promptSeederTemplate,\n  __RewireAPI__ as moduleRewireAPI,\n} from './prompts';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    inquirer: { prompt: sinon.stub() },\n    validateSeedersFolderName: sinon.stub(),\n    validateSeederTemplatePath: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should prompt to enter seeders-folder-name', async t => {\n  const seedersFolderName = 'some-folder-name';\n  const { inquirer, validateSeedersFolderName } = t.context.mocks;\n\n  const fakedPrompt = async optionsArray => {\n    const promptResults = {};\n\n    for (const { name, validate, filter } of optionsArray) {\n      const value = filter(seedersFolderName);\n\n      if (!validate(value)) throw new Error(`${name} is invalid`);\n\n      promptResults[name] = value;\n    }\n\n    return promptResults;\n  };\n\n  inquirer.prompt.callsFake(fakedPrompt);\n  validateSeedersFolderName.withArgs(seedersFolderName).returns(true);\n\n  const result = await promptSeedersFolder();\n\n  t.is(result, seedersFolderName);\n  t.true(validateSeedersFolderName.calledWith(seedersFolderName));\n});\n\ntest.serial('should prompt to use custom template and decline', async t => {\n  const { inquirer } = t.context.mocks;\n\n  inquirer.prompt.callsFake(async () => ({\n    useCustomSeeder: false,\n  }));\n\n  const result = await promptSeederTemplate();\n\n  t.is(result, undefined);\n});\n\ntest.serial(\n  'should prompt to use custom template and accept with file path',\n  async t => {\n    const { inquirer, validateSeederTemplatePath } = t.context.mocks;\n    const seederTemplatePath = './some-file-name.js';\n\n    const fakedPrompt = async optionsArray => {\n      const { name, validate, filter } = optionsArray[0];\n\n      if (name === 'useCustomSeeder') return { useCustomSeeder: true };\n\n      if (name === 'seederTemplatePath') {\n        const value = filter(seederTemplatePath);\n        if (!validate(value)) throw new Error(`${name} is invalid`);\n\n        return { seederTemplatePath };\n      }\n    };\n\n    inquirer.prompt.callsFake(fakedPrompt);\n    validateSeederTemplatePath.withArgs(seederTemplatePath).returns(true);\n\n    const result = await promptSeederTemplate();\n\n    t.is(result, seederTemplatePath);\n  }\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/prompts.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/lib/commands/init/run-installer.js",
    "content": "import { Installer } from '../../core';\nimport { promptMissingOptions } from './options';\nimport InstallerLogger from './installer-logger';\n\n/**\n * Run the installer\n * @param  {Object}  [options={}] installer options\n * @param  {string}  options.seedersFolder\n * @param  {string}  options.seedersTemplate\n * @return {Promise}\n */\nexport default async (options = {}) => {\n  // get relevat config and options\n  const { seedersFolder, customSeederTemplate } = await promptMissingOptions(\n    options\n  );\n\n  // create logger\n  const logger = new InstallerLogger();\n\n  // create installer\n  const installer = new Installer({ seedersFolder, customSeederTemplate });\n\n  // run seeders\n  const observable = installer.install();\n\n  // subscribe logger\n  observable.subscribe(logger.asObserver());\n\n  // wait for installer to finish\n  await observable.toPromise();\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/run-installer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "runinstaller",
    "memberof": "src/lib/commands/init/run-installer.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/run-installer.js~runinstaller",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/run-installer.js",
    "importStyle": "runinstaller",
    "description": "Run the installer",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "installer options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.seedersFolder",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.seedersTemplate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/lib/commands/init/run-installer.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport Installer from '../../core/__mocks__/installer';\n\nimport runInstaller, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './run-installer';\n\nimport InstallerLogger from './__mocks__/installer-logger';\n\nconst testInstaller = async (t, options) => {\n  const { Installer, promptMissingOptions } = t.context.mocks;\n\n  const seedersFolder =\n    (options && options.seedersFolder) || 'some-seeder-folder';\n\n  const customSeederTemplate =\n    (options && options.customSeederTemplate) || 'some-file-path.js';\n\n  promptMissingOptions.resolves({ seedersFolder, customSeederTemplate });\n\n  await runInstaller(options);\n\n  t.true(promptMissingOptions.calledWith(options || {}));\n  t.true(Installer.calledWith({ seedersFolder, customSeederTemplate }));\n  t.true(Installer.prototype.install.called);\n  t.true(\n    Installer.stubbedOvservable.subscribe.calledWith(\n      InstallerLogger.stubbedOvserver\n    )\n  );\n  t.true(Installer.stubbedOvservable.toPromise.called);\n\n  t.true(InstallerLogger.called);\n  t.true(InstallerLogger.prototype.asObserver.called);\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    InstallerLogger,\n    Installer,\n    promptMissingOptions: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should run installer', t => testInstaller(t));\n\ntest.serial('should run installer with options', t =>\n  testInstaller(t, {\n    seedersFolder: 'some-seeders-folder',\n    customSeederTemplate: 'some-file-path.js',\n  })\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/run-installer.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "testInstaller",
    "memberof": "src/lib/commands/init/run-installer.test.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/init/run-installer.test.js~testInstaller",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/init/run-installer.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/lib/commands/init/usage-guide.js",
    "content": "import generateUsageGuide from 'command-line-usage';\nimport optionDefinitions from './option-definitions';\n\n/**\n * @private\n */\nconst usageGuide = generateUsageGuide([\n  {\n    header: 'Initialize mongoose-data-seed',\n    content: `Install mongoose-data-seed into your project.\n      Generate md-seed-config.js, md-seed-generator.js and create seeders folder`,\n  },\n  {\n    header: 'Synopsis',\n    content: [\n      '$ md-seed init [{bold --seedersFolder}={underline folder-name}] [{bold --seederTemplate}={underline file-path}]',\n      '$ md-seed init {bold --help}',\n    ],\n  },\n  {\n    header: 'Options',\n    optionList: optionDefinitions,\n  },\n]);\n\nexport default usageGuide;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/usage-guide.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "usageGuide",
    "memberof": "src/lib/commands/init/usage-guide.js",
    "static": true,
    "longname": "src/lib/commands/init/usage-guide.js~usageGuide",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/init/usage-guide.js",
    "importStyle": "usageGuide",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/lib/commands/run/help.js",
    "content": "import usageGuide from './usage-guide';\n\n/**\n * Prints the run command user-guide\n */\nconst help = () => console.log(usageGuide);\n\nexport default help;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/help.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "help",
    "memberof": "src/lib/commands/run/help.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/run/help.js~help",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/help.js",
    "importStyle": "help",
    "description": "Prints the run command user-guide",
    "lineNumber": 6,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/lib/commands/run/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/help.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/lib/commands/run/index.js",
    "content": "import { getOptions } from './options';\nimport help from './help';\nimport run from './run';\n\n/**\n * mongoose-data-seed run command\n * @param  {stringp[]}  argv cli arguments\n * @return {Promise}\n */\nexport default async argv => {\n  const { helpWanted, ...options } = getOptions(argv);\n\n  if (helpWanted) return help();\n\n  return run(options);\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "index",
    "memberof": "src/lib/commands/run/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/run/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/index.js",
    "importStyle": "index",
    "description": "mongoose-data-seed run command",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "stringp[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/lib/commands/run/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport command, { __RewireAPI__ as moduleRewireAPI } from './index';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    run: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest.serial('should show help', async t => {\n  const { getOptions, help, run } = t.context.mocks;\n\n  const argv = 'some-argv';\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await command(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(run.called);\n});\n\ntest.serial('should run installer', async t => {\n  const { getOptions, help, run } = t.context.mocks;\n\n  const argv = 'some-argv';\n  const options = { some: 'options' };\n\n  getOptions.withArgs(argv).returns(options);\n\n  await command(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(run.calledWith(options));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/index.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/lib/commands/run/option-definitions.js",
    "content": "/**\n * Run command option defenitions\n * @type {Object[]}\n */\nconst optionDefinitions = [\n  {\n    name: 'seeders',\n    alias: 's',\n    type: String,\n    multiple: true,\n    defaultValue: [],\n    defaultOption: true,\n    typeLabel: 'seeder ...',\n    description: 'Seeders names to run',\n  },\n  {\n    name: 'dropdb',\n    alias: 'd',\n    type: Boolean,\n    defaultValue: false,\n    description: 'Drop the database before seeding',\n  },\n  {\n    name: 'help',\n    alias: 'h',\n    type: Boolean,\n    defaultValue: false,\n    description: 'Show usage guide',\n  },\n];\n\nexport default optionDefinitions;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/option-definitions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "optionDefinitions",
    "memberof": "src/lib/commands/run/option-definitions.js",
    "static": true,
    "longname": "src/lib/commands/run/option-definitions.js~optionDefinitions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/option-definitions.js",
    "importStyle": "optionDefinitions",
    "description": "Run command option defenitions",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/lib/commands/run/options.js",
    "content": "import commandLineArgs from 'command-line-args';\n\nimport optionDefinitions from './option-definitions';\n\n/**\n * Get run options from argv or prompts\n * @param    {string[]} argv              cli argv\n * @return   {Object}                     run options\n * @property {string[]} selectedSeeders\n * @property {boolean}  dropDatabase\n * @property {boolean}  helpWanted\n */\nexport const getOptions = argv => {\n  const {\n    seeders: selectedSeeders,\n    dropdb: dropDatabase,\n    help: helpWanted,\n  } = commandLineArgs(optionDefinitions, { argv });\n\n  return { selectedSeeders, dropDatabase, helpWanted };\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getOptions",
    "memberof": "src/lib/commands/run/options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/run/options.js~getOptions",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/options.js",
    "importStyle": "{getOptions}",
    "description": "Get run options from argv or prompts",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "cli argv"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedSeeders",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dropDatabase",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "helpWanted",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "run options"
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/lib/commands/run/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport { getOptions, __RewireAPI__ as moduleRewireAPI } from './options';\n\nconst helpData = {\n  argv: 'some-argv',\n  seeders: 'some-seeders',\n  dropdb: true,\n  help: false,\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    optionDefinitions: 'some option definitions',\n    commandLineArgs: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('should get user options from the cli', t => {\n  const { argv, seeders, dropdb, help } = helpData;\n\n  const { commandLineArgs, optionDefinitions } = t.context.mocks;\n\n  commandLineArgs.withArgs(optionDefinitions, { argv }).returns({\n    seeders,\n    dropdb,\n    help,\n  });\n\n  const expectedOptions = {\n    selectedSeeders: seeders,\n    dropDatabase: dropdb,\n    helpWanted: help,\n  };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/options.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/commands/run/options.test.js",
    "static": true,
    "longname": "src/lib/commands/run/options.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/run/options.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"argv\": string, \"seeders\": string, \"dropdb\": boolean, \"help\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/lib/commands/run/run-logger.js",
    "content": "import chalk from 'chalk';\nimport logSymbols from 'log-symbols';\nimport { Spinner } from 'clui';\n\nimport BaseLogger from '../../utils/base-logger';\nimport { MdSeedRunner } from '../../core';\n\n/**\n * Run Logger\n */\nexport default class RunLogger extends BaseLogger {\n  constructor() {\n    super();\n\n    this.spinner = new Spinner();\n  }\n\n  /**\n   * Log next notification\n   * @param  {Object} notification notification to log\n   * @param  {string} notification.type    operation type\n   * @param  {Object} notification.payload operation payload\n   */\n  next({ type, payload }) {\n    this.spinner.stop();\n\n    switch (type) {\n      case MdSeedRunner.operations.MONGOOSE_CONNECT_START:\n        this.spinner.message('Trying to connect to MongoDB...');\n        this.spinner.start();\n        break;\n      case MdSeedRunner.operations.MONGOOSE_CONNECT_SUCCESS:\n        console.log(`${logSymbols.success} Successfully connected to MongoDB!`);\n        break;\n      case MdSeedRunner.operations.MONGOOSE_DROP_START:\n        this.spinner.message('Droping database...');\n        this.spinner.start();\n        break;\n      case MdSeedRunner.operations.MONGOOSE_DROP_SUCCESS:\n        console.log(`${logSymbols.success} Database dropped!`);\n        break;\n      case MdSeedRunner.operations.ALL_SEEDERS_START:\n        console.log();\n        console.log(`${chalk.cyan('Seeding Results:')}`);\n        break;\n      case MdSeedRunner.operations.ALL_SEEDERS_FINISH:\n        console.log();\n        console.log(`${logSymbols.success} Done.`);\n        break;\n      case MdSeedRunner.operations.SEEDER_START:\n        this.spinner.message(payload.name);\n        this.spinner.start();\n        break;\n      case MdSeedRunner.operations.SEEDER_SUCCESS:\n        if (payload.results && payload.results.run) {\n          console.log(\n            `${logSymbols.success} ${payload.name}: ${chalk.gray(\n              payload.results.created\n            )}`\n          );\n        } else {\n          console.log(`${chalk.gray('-')} ${payload.name}: ${chalk.gray(0)}`);\n        }\n        break;\n    }\n  }\n\n  /**\n   * Log error\n   * @param  {Object} error         error to log\n   * @param  {string} error.type    error type\n   * @param  {Object} error.payload error payload\n   */\n  error({ type, payload }) {\n    this.spinner.stop();\n\n    switch (type) {\n      case MdSeedRunner.operations.MONGOOSE_CONNECT_ERROR:\n        console.log(`${logSymbols.error} Unable to connected to MongoDB!`);\n        break;\n      case MdSeedRunner.operations.MONGOOSE_DROP_ERROR:\n        console.log(`${logSymbols.error} Unable to drop database!`);\n        break;\n      case MdSeedRunner.operations.SEEDER_ERROR:\n        console.log(`${logSymbols.error} ${payload.name}`);\n        break;\n    }\n\n    if (payload && payload.error) console.error(payload.error);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run-logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "class",
    "name": "RunLogger",
    "memberof": "src/lib/commands/run/run-logger.js",
    "static": true,
    "longname": "src/lib/commands/run/run-logger.js~RunLogger",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/run-logger.js",
    "importStyle": "RunLogger",
    "description": "Run Logger",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/lib/utils/base-logger.js~BaseLogger"
    ]
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/commands/run/run-logger.js~RunLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/commands/run/run-logger.js~RunLogger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "spinner",
    "memberof": "src/lib/commands/run/run-logger.js~RunLogger",
    "static": false,
    "longname": "src/lib/commands/run/run-logger.js~RunLogger#spinner",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "next",
    "memberof": "src/lib/commands/run/run-logger.js~RunLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/commands/run/run-logger.js~RunLogger#next",
    "access": "public",
    "description": "Log next notification",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": "notification to log"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "notification.type",
        "description": "operation type"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification.payload",
        "description": "operation payload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "error",
    "memberof": "src/lib/commands/run/run-logger.js~RunLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/commands/run/run-logger.js~RunLogger#error",
    "access": "public",
    "description": "Log error",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error to log"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error.type",
        "description": "error type"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "error.payload",
        "description": "error payload"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/lib/commands/run/run-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport RunLogger, { __RewireAPI__ as moduleRewireAPI } from './run-logger';\n\nconst createMockedLogger = () => {\n  const logger = new RunLogger();\n\n  logger.spinner = {\n    start: sinon.stub(),\n    stop: sinon.stub(),\n    message: sinon.stub(),\n  };\n\n  return logger;\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    clui: { Spinner: sinon.stub() },\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n\n  sinon.stub(global.console, 'log');\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n\n  global.console.log.restore();\n});\n\ntest.serial('Should create a run-logger instance', t => {\n  const logger = new RunLogger();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest.serial('Should return observer', t => {\n  const logger = new RunLogger();\n\n  const observer = logger.asObserver();\n\n  t.is(typeof observer.next, 'function');\n  t.is(typeof observer.error, 'function');\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_START', t => {\n  const logger = createMockedLogger();\n\n  const type = 'MONGOOSE_CONNECT_START';\n\n  logger.next({ type });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledOnce);\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'MONGOOSE_CONNECT_SUCCESS';\n\n  logger.next({ type });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Successfully connected to MongoDB/)\n    )\n  );\n});\n\ntest.serial('Should log MONGOOSE_DROP_START', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'MONGOOSE_DROP_START' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledOnce);\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log MONGOOSE_DROP_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'MONGOOSE_DROP_SUCCESS' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Database dropped/)));\n});\n\ntest.serial('Should log ALL_SEEDERS_START', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'ALL_SEEDERS_START' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Seeding Results/)));\n});\n\ntest.serial('Should log ALL_SEEDERS_FINISH', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'ALL_SEEDERS_FINISH' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Done/)));\n});\n\ntest.serial('Should log SEEDER_START', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name' };\n\n  logger.next({ type: 'SEEDER_START', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledWith(payload.name));\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log SEEDER_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name', results: { run: true, created: '10' } };\n\n  logger.next({ type: 'SEEDER_SUCCESS', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n  t.true(global.console.log.calledWith(sinon.match(payload.results.created)));\n});\n\ntest.serial('Should log SEEDER_SUCCESS with run=false', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name', results: { run: false, created: '0' } };\n\n  logger.next({ type: 'SEEDER_SUCCESS', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n  t.true(global.console.log.calledWith(sinon.match(payload.results.created)));\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_ERROR', t => {\n  const logger = createMockedLogger();\n\n  logger.error({ type: 'MONGOOSE_CONNECT_ERROR' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(\n    global.console.log.calledWith(sinon.match(/Unable to connected to MongoDB/))\n  );\n});\n\ntest.serial('Should log MONGOOSE_DROP_ERROR', t => {\n  const logger = createMockedLogger();\n\n  logger.error({ type: 'MONGOOSE_DROP_ERROR' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Unable to drop database/)));\n});\n\ntest.serial('Should log SEEDER_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name' };\n\n  logger.error({ type: 'SEEDER_ERROR', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n});\n\ntest.serial('Should log error', t => {\n  sinon.stub(global.console, 'error');\n\n  const logger = createMockedLogger();\n\n  const payload = { error: 'some-error' };\n\n  logger.error({ type: 'some-type', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.error.calledWith(payload.error));\n\n  global.console.error.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run-logger.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "createMockedLogger",
    "memberof": "src/lib/commands/run/run-logger.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/commands/run/run-logger.test.js~createMockedLogger",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/run/run-logger.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/lib/commands/run/run.js",
    "content": "import config from '../../config';\nimport { MdSeedRunner } from '../../core';\nimport { validateUserConfig } from '../../utils/helpers';\n\nimport RunLogger from './run-logger';\n\n/**\n * Run seeders\n * @param  {Object}   [options={}]          Options\n * @param  {string[]} [options.selectedSeeders=[]]  Selected seeders to run.\n *                                                  When empty, run all seeders.\n * @param  {boolean}   [options.dropDatabase=false] Drop database before running?\n * @return {Promise}\n */\nconst run = async ({ selectedSeeders = [], dropDatabase = false } = {}) => {\n  validateUserConfig();\n\n  // get relevant user-config\n  const { connect, dropdb, seedersList } = config.loadUserConfig();\n\n  // create logger\n  const logger = new RunLogger();\n\n  // create runner\n  const runner = new MdSeedRunner({ connect, dropdb, seedersList });\n\n  // run seeders\n  const observable = runner.run({ selectedSeeders, dropDatabase });\n\n  // subscribe logger\n  observable.subscribe(logger.asObserver());\n\n  // wait for runner\n  await observable.toPromise();\n};\n\nexport default run;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "run",
    "memberof": "src/lib/commands/run/run.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/commands/run/run.js~run",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/run.js",
    "importStyle": "run",
    "description": "Run seeders",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Options"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "options.selectedSeeders",
        "description": "Selected seeders to run.\n                                                 When empty, run all seeders."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.dropDatabase",
        "description": "Drop database before running?"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/lib/commands/run/run.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport MdSeedRunner from '../../core/__mocks__/md-seed-runner';\nimport RunLogger from './__mocks__/run-logger';\n\nimport run, { __RewireAPI__ as moduleRewireAPI } from './run';\n\nconst userConfig = {\n  connect: sinon.stub().resolves(),\n  dropdb: sinon.stub().resolves(),\n  seedersList: 'some-seeders-list',\n};\n\nconst config = {\n  loadUserConfig: () => userConfig,\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    config,\n    MdSeedRunner,\n    RunLogger,\n    validateUserConfig: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest.serial('Should run', async t => {\n  const { validateUserConfig, MdSeedRunner, RunLogger } = t.context.mocks;\n\n  await run();\n\n  t.true(validateUserConfig.called);\n\n  t.true(MdSeedRunner.calledWith(userConfig));\n  t.true(\n    MdSeedRunner.prototype.run.calledWith({\n      selectedSeeders: [],\n      dropDatabase: false,\n    })\n  );\n  t.true(\n    MdSeedRunner.stubbedOvservable.subscribe.calledWith(\n      RunLogger.stubbedOvserver\n    )\n  );\n  t.true(MdSeedRunner.stubbedOvservable.toPromise.called);\n\n  t.true(RunLogger.called);\n  t.true(RunLogger.prototype.asObserver.called);\n});\n\ntest.serial('Should run with args', async t => {\n  const { validateUserConfig, MdSeedRunner, RunLogger } = t.context.mocks;\n\n  const selectedSeeders = ['some', 'seeders'];\n  const dropDatabase = true;\n\n  await run({ selectedSeeders, dropDatabase });\n\n  t.true(validateUserConfig.called);\n\n  t.true(MdSeedRunner.calledWith(userConfig));\n  t.true(\n    MdSeedRunner.prototype.run.calledWith({\n      selectedSeeders,\n      dropDatabase,\n    })\n  );\n  t.true(\n    MdSeedRunner.stubbedOvservable.subscribe.calledWith(\n      RunLogger.stubbedOvserver\n    )\n  );\n  t.true(MdSeedRunner.stubbedOvservable.toPromise.called);\n\n  t.true(RunLogger.called);\n  t.true(RunLogger.prototype.asObserver.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "userConfig",
    "memberof": "src/lib/commands/run/run.test.js",
    "static": true,
    "longname": "src/lib/commands/run/run.test.js~userConfig",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/run/run.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"connect\": *, \"dropdb\": *, \"seedersList\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "config",
    "memberof": "src/lib/commands/run/run.test.js",
    "static": true,
    "longname": "src/lib/commands/run/run.test.js~config",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/commands/run/run.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"loadUserConfig\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/lib/commands/run/usage-guide.js",
    "content": "import generateUsageGuide from 'command-line-usage';\nimport optionDefinitions from './option-definitions';\n\n/**\n * Run command user guide\n * @type {string}\n */\nconst usageGuide = generateUsageGuide([\n  {\n    header: 'Seed runner',\n    content: 'Seed data into the database',\n  },\n  {\n    header: 'Synopsis',\n    content: [\n      '$ md-seed run [{bold --dropdb}] [{bold --seeders} {underline seeder} ...]',\n      '$ md-seed run {bold --help}',\n    ],\n  },\n  {\n    header: 'Options',\n    optionList: optionDefinitions,\n  },\n  {\n    header: 'Examples',\n    content: `{bold 1. Run all seeders:}\n      $ md-seed run\n\n      {bold 2. Run selected seeders:}\n      $ md-seed run {bold --seeders} {underline User} {underline Settings}\n      {italic  or}\n      $ md-seed run {bold -s} {underline User} {underline Settings}\n      {italic  or}\n      $ md-seed run {underline User} {underline Settings}\n\n      {bold 3. Drop database and run all seeders:}\n      $ md-seed run {bold --dropdb}\n      {italic  or}\n      $ md-seed run {bold -d}\n\n      {bold 4. Drop database and run selected seeders:}\n      $ md-seed run {underline User} {underline Settings} {bold --dropdb}\n      {italic   or}\n      $ md-seed run {underline User} {underline Settings} {bold -d}\n      `,\n  },\n]);\n\nexport default usageGuide;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/usage-guide.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "usageGuide",
    "memberof": "src/lib/commands/run/usage-guide.js",
    "static": true,
    "longname": "src/lib/commands/run/usage-guide.js~usageGuide",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/commands/run/usage-guide.js",
    "importStyle": "usageGuide",
    "description": "Run command user guide",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/lib/config.js",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport findRoot from 'find-root';\n\nimport {\n  defaultUserGeneratorConfig,\n  systemSeederTemplate,\n  systemConfigTemplate,\n  configFilename,\n} from './constants';\n\n/**\n * Get the user project root path\n * @return {string}\n */\nconst getProjectRoot = () => {\n  const workingDir = process.cwd();\n  return findRoot(workingDir);\n};\n\n/**\n * mongoose-data-seed config\n * @type {Object}\n * @property {Function} clean\n * @property {Function} getConfigFromPackageJson\n * @property {Function} getUserGeneratorConfig\n * @property {Function} update\n * @property {Function} loadUserConfig\n * @property {String}   projectRoot\n * @property {String}   userConfigFilename\n * @property {String}   userConfigFilepath\n * @property {String}   userSeedersFolderName\n * @property {String}   userSeedersFolderPath\n * @property {boolean}  userConfigExists\n * @property {String}   seederTemplate\n * @property {String}   configTemplate\n */\nconst config = {\n  /**\n   * Clean the config\n   */\n  clean() {\n    delete this.workingDir;\n    delete this.projectRoot;\n    delete this.userConfigFilename;\n    delete this.userConfigFilepath;\n    delete this.userSeedersFolderName;\n    delete this.userSeedersFolderPath;\n    delete this.userConfigExists;\n    delete this.userConfig;\n    delete this.seederTemplate;\n    delete this.configTemplate;\n  },\n\n  /**\n   * Get the user config from the user package.json file\n   * @param  {string} [projectRoot=getProjectRoot()] user project root path\n   * @return {Object}\n   */\n  getConfigFromPackageJson(projectRoot = getProjectRoot()) {\n    const packageJsonPath = path.join(projectRoot, 'package.json');\n    const { mdSeed = {} } = require(packageJsonPath);\n\n    return mdSeed;\n  },\n\n  /**\n   * Get the user generator config\n   * @param  {string} [projectRoot=getProjectRoot()] user project root path\n   * @return {Object}\n   */\n  getUserGeneratorConfig(projectRoot = getProjectRoot()) {\n    return {\n      ...defaultUserGeneratorConfig,\n      ...this.getConfigFromPackageJson(projectRoot),\n    };\n  },\n\n  /**\n   * Update (reload) the config\n   * @param  {string} [projectRoot=getProjectRoot()] user project root path\n   */\n  update(projectRoot = getProjectRoot()) {\n    const { seedersFolder, customSeederTemplate } = this.getUserGeneratorConfig(\n      projectRoot\n    );\n\n    const userSeedersFolderName = seedersFolder;\n    const userSeedersFolderPath = path.join(projectRoot, userSeedersFolderName);\n\n    const userConfigFilename = configFilename;\n    const userConfigFilepath = path.join(projectRoot, userConfigFilename);\n    const userConfigExists = fs.existsSync(userConfigFilepath);\n\n    const configTemplate = systemConfigTemplate;\n\n    const seederTemplate = customSeederTemplate\n      ? path.join(projectRoot, customSeederTemplate)\n      : systemSeederTemplate;\n\n    this.projectRoot = projectRoot;\n    this.userConfigFilename = userConfigFilename;\n    this.userConfigFilepath = userConfigFilepath;\n    this.userSeedersFolderName = userSeedersFolderName;\n    this.userSeedersFolderPath = userSeedersFolderPath;\n    this.userConfigExists = userConfigExists;\n    this.seederTemplate = seederTemplate;\n    this.configTemplate = configTemplate;\n  },\n\n  /**\n   * Load the user config\n   */\n  loadUserConfig() {\n    return require(this.userConfigFilepath);\n  },\n};\n\nconfig.update();\n\nexport default config;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "getProjectRoot",
    "memberof": "src/lib/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/config.js~getProjectRoot",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/config.js",
    "importStyle": null,
    "description": "Get the user project root path",
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "config",
    "memberof": "src/lib/config.js",
    "static": true,
    "longname": "src/lib/config.js~config",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/config.js",
    "importStyle": "config",
    "description": "mongoose-data-seed config",
    "lineNumber": 38,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "clean",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getConfigFromPackageJson",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getUserGeneratorConfig",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "loadUserConfig",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "projectRoot",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigFilename",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigFilepath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "userSeedersFolderName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "userSeedersFolderPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigExists",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "seederTemplate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "configTemplate",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/lib/constants.js",
    "content": "import path from 'path';\n\n/**\n * mongoose-data-seed user config filename\n * @type {String}\n */\nexport const configFilename = 'md-seed-config.js';\n\n/**\n * mongoose-data-seed default user generator-config\n * @type {Object}\n * @property {string} seedersFolder\n */\nexport const defaultUserGeneratorConfig = {\n  seedersFolder: './seeders',\n};\n\n/**\n * system seeder template path\n * @type {string}\n */\nexport const systemSeederTemplate = path.join(\n  __dirname,\n  '../../templates/seeder.ejs'\n);\n\n/**\n * system template for user-config path\n * @type {string}\n */\nexport const systemConfigTemplate = path.join(\n  __dirname,\n  '../../templates/md-seed-config.ejs'\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "configFilename",
    "memberof": "src/lib/constants.js",
    "static": true,
    "longname": "src/lib/constants.js~configFilename",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/constants.js",
    "importStyle": "{configFilename}",
    "description": "mongoose-data-seed user config filename",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "defaultUserGeneratorConfig",
    "memberof": "src/lib/constants.js",
    "static": true,
    "longname": "src/lib/constants.js~defaultUserGeneratorConfig",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/constants.js",
    "importStyle": "{defaultUserGeneratorConfig}",
    "description": "mongoose-data-seed default user generator-config",
    "lineNumber": 14,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seedersFolder",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "systemSeederTemplate",
    "memberof": "src/lib/constants.js",
    "static": true,
    "longname": "src/lib/constants.js~systemSeederTemplate",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/constants.js",
    "importStyle": "{systemSeederTemplate}",
    "description": "system seeder template path",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "systemConfigTemplate",
    "memberof": "src/lib/constants.js",
    "static": true,
    "longname": "src/lib/constants.js~systemConfigTemplate",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/constants.js",
    "importStyle": "{systemConfigTemplate}",
    "description": "system template for user-config path",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/lib/core/index.js",
    "content": "export { default as Installer } from './installer';\nexport { default as SeederGenerator } from './seeder-generator';\nexport { default as MdSeedRunner } from './md-seed-runner';\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/lib/core/installer-error.js",
    "content": "/**\n * Installer Error\n */\nexport default class InstallerError extends Error {\n  /**\n   * Creates an InstallerError.\n   * @param {Object} [options={}]         options\n   * @param {String} [options.type='']    The error type key (Installer.operations).\n   * @param {Object} [options.payload={}] A custom payload object.\n   * @param {Error}  [options.error={}]   Error object.\n   */\n  constructor({ type = '', payload = {}, error = {} } = {}) {\n    super(error.message || 'InstallerError');\n\n    /**\n     * Error name.\n     * @type {String}\n     */\n    this.name = 'InstallerError';\n    /**\n     * Error type (one of the Installer.operations).\n     * @type {String}\n     */\n    this.type = type;\n    /**\n     * Custom payload object.\n     * @type {Object}\n     */\n    this.payload = { ...payload, error };\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "InstallerError",
    "memberof": "src/lib/core/installer-error.js",
    "static": true,
    "longname": "src/lib/core/installer-error.js~InstallerError",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/core/installer-error.js",
    "importStyle": "InstallerError",
    "description": "Installer Error",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/core/installer-error.js~InstallerError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer-error.js~InstallerError#constructor",
    "access": "public",
    "description": "Creates an InstallerError.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "options.type",
        "description": "The error type key (Installer.operations)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.payload",
        "description": "A custom payload object."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.error",
        "description": "Error object."
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "name",
    "memberof": "src/lib/core/installer-error.js~InstallerError",
    "static": false,
    "longname": "src/lib/core/installer-error.js~InstallerError#name",
    "access": "public",
    "description": "Error name.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "type",
    "memberof": "src/lib/core/installer-error.js~InstallerError",
    "static": false,
    "longname": "src/lib/core/installer-error.js~InstallerError#type",
    "access": "public",
    "description": "Error type (one of the Installer.operations).",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "payload",
    "memberof": "src/lib/core/installer-error.js~InstallerError",
    "static": false,
    "longname": "src/lib/core/installer-error.js~InstallerError#payload",
    "access": "public",
    "description": "Custom payload object.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/lib/core/installer-error.test.js",
    "content": "import test from 'ava';\n\nimport InstallerError from './installer-error';\n\ntest('should create error', t => {\n  const error = new InstallerError();\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with type', t => {\n  const type = 'some-type';\n  const error = new InstallerError({ type });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, type);\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with payload', t => {\n  const payload = { some: 'payload' };\n  const error = new InstallerError({ payload });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { ...payload, error: {} });\n});\n\ntest('should create error with inner error', t => {\n  const innerError = new Error('some-error');\n  const error = new InstallerError({ error: innerError });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: innerError });\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer-error.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/lib/core/installer.js",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\nimport { Subject } from 'rxjs';\n\nimport { defaultUserGeneratorConfig, systemSeederTemplate } from '../constants';\nimport config from '../config';\n\nimport InstallerError from './installer-error';\n\n/**\n * mongoose-data-seed installer\n *\n * @example\n * // create installer\n * const installer = new Installer({ seedersFolder: './seeders' });\n *\n * // run seeders\n * const observable = installer.install();\n *\n * // subscribe logger\n * observable.subscribe({\n *   next({ type, payload }) {\n *     switch (type) {\n *       case Installer.operations.START:\n *         console.log('Installer started!');\n *         break;\n *       case Installer.operations.SUCCESS:\n *         console.log('Installer finished successfully!');\n *         break;\n *     }\n *   },\n *   error({ type, payload }) {\n *     console.error(`Error: ${type}`);\n *     console.error(payload.error);\n *   }\n * });\n */\nexport default class Installer {\n  /**\n   * @typedef {Object} InstallerConfig\n   * @property {string}  seedersFolder        Relative path to your seeders-folder.\n   * @property {?string} customSeederTemplate Relative path to your seeder-template\n   *                                          if you would like to use your own seeders-template\n   */\n\n  /**\n   * Installer operations constants\n   * @type {Object}\n   * @property {string} START        Installation starts.\n   * @property {string} SUCCESS      Installation succeed.\n   * @property {string} ERROR        Installation finished with an error.\n   */\n  static operations = {\n    START: 'START',\n    SUCCESS: 'SUCCESS',\n    ERROR: 'ERROR',\n\n    WRITE_USER_GENERETOR_CONFIG_START: 'WRITE_USER_GENERETOR_CONFIG_START',\n    WRITE_USER_GENERETOR_CONFIG_SUCCESS: 'WRITE_USER_GENERETOR_CONFIG_SUCCESS',\n    WRITE_USER_GENERETOR_CONFIG_ERROR: 'WRITE_USER_GENERETOR_CONFIG_ERROR',\n\n    CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START:\n      'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n    CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS:\n      'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n    CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR:\n      'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR',\n    CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS:\n      'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n    CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM:\n      'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n\n    CREATE_SEEDERS_FOLDER_START: 'CREATE_SEEDERS_FOLDER_START',\n    CREATE_SEEDERS_FOLDER_SUCCESS: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n    CREATE_SEEDERS_FOLDER_ERROR: 'CREATE_SEEDERS_FOLDER_ERROR',\n    CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS:\n      'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n\n    WRITE_USER_CONFIG_START: 'WRITE_USER_CONFIG_START',\n    WRITE_USER_CONFIG_SUCCESS: 'WRITE_USER_CONFIG_SUCCESS',\n    WRITE_USER_CONFIG_ERROR: 'WRITE_USER_CONFIG_ERROR',\n    WRITE_USER_CONFIG_SKIP_FILE_EXISTS: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n  };\n\n  /**\n   * Creates mongoose-data-seed installer\n   * @param {InstallerConfig} [config] Generator config\n   */\n  constructor({\n    seedersFolder,\n    customSeederTemplate,\n  } = defaultUserGeneratorConfig) {\n    this._subject = new Subject();\n    this._initConfig({ seedersFolder, customSeederTemplate });\n    this._initMemFs();\n  }\n\n  /**\n   * Run installer - install `mongoose-data-seeder`\n   * @return {Observable}\n   * @see https://rxjs-dev.firebaseapp.com/api/index/class/Observable\n   */\n  install() {\n    this._install();\n\n    return this._subject.asObservable();\n  }\n\n  /**\n   * get the config that should be written into the `package.json`\n   * @return {InstallerConfig} generator config\n   */\n  getGeneratorConfig() {\n    const {\n      userSeedersFolderName: seedersFolder,\n      customSeederTemplateFilename: customSeederTemplate,\n    } = this.config;\n\n    const generatorConfig = { seedersFolder };\n\n    if (customSeederTemplate) {\n      generatorConfig.customSeederTemplate = customSeederTemplate;\n    }\n\n    return generatorConfig;\n  }\n\n  /*\n    Private methods\n   */\n\n  /**\n   * Initiate this.config\n   * @param {InstallerConfig} config generator config\n   */\n  _initConfig({ seedersFolder, customSeederTemplate }) {\n    /**\n     * Full configuration object\n     * @type {Object}\n     * @property {string}  userPackageJsonPath path to the user package.json file.\n     * @property {?string} customSeederTemplateFilename custom seeder template filename.\n     * @property {?string} customSeederTemplatePath custom seeder template path.\n     * @property {string}  userSeedersFolderName seeders folder name.\n     * @property {string}  userSeedersFolderPath seeders folder path.\n     * @property {boolean} userConfigExists user has a config file?.\n     * @property {?string} userConfigFilename config file name.\n     * @property {?string} userConfigFilepath config file path.\n     * @property {string}  configTemplatePath config template path.\n     */\n    this.config = {\n      userPackageJsonPath: path.join(config.projectRoot, './package.json'),\n      customSeederTemplateFilename:\n        customSeederTemplate && customSeederTemplate,\n      customSeederTemplatePath:\n        customSeederTemplate &&\n        path.join(config.projectRoot, customSeederTemplate),\n      userSeedersFolderName: seedersFolder,\n      userSeedersFolderPath: path.join(config.projectRoot, seedersFolder),\n      userConfigExists: config.userConfigExists,\n      userConfigFilename: config.userConfigFilename,\n      userConfigFilepath: config.userConfigFilepath,\n      configTemplatePath: config.configTemplate,\n    };\n  }\n\n  /**\n   * Initiate the in-memory file-system\n   */\n  _initMemFs() {\n    const store = memFs.create();\n    this._memFsEditor = editor.create(store);\n  }\n\n  /**\n   * Run the installation process\n   * @return {Promise}\n   */\n  async _install() {\n    const { START, SUCCESS, ERROR } = Installer.operations;\n\n    try {\n      this._subject.next({ type: START });\n\n      await this._createCustomSeederTemplate();\n      await this._writeUserGeneratorConfigToPackageJson();\n      await this._createSeedersFolder();\n      await this._writeUserConfig();\n\n      this._subject.next({ type: SUCCESS });\n\n      this._subject.complete();\n    } catch (error) {\n      const { type = ERROR, payload = { error } } = error;\n\n      this._subject.error({ type, payload });\n    }\n  }\n\n  /**\n   * Commit the in-memory file changes\n   * @return {Promise}\n   */\n  async _commitMemFsChanges() {\n    return new Promise(resolve => {\n      this._memFsEditor.commit(() => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Copy the package seeder-template to the user desired\n   * custom-seeder-template path if the user wants to use his own seeder-template\n   * @return {Promise} [description]\n   */\n  async _createCustomSeederTemplate() {\n    const {\n      CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START,\n      CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS,\n      CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR,\n      CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS,\n      CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM,\n    } = Installer.operations;\n\n    const {\n      customSeederTemplateFilename,\n      customSeederTemplatePath,\n    } = this.config;\n\n    const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n    const notify = type => this._subject.next({ type, payload });\n\n    try {\n      notify(CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START);\n\n      if (!customSeederTemplatePath) {\n        return notify(CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM);\n      }\n\n      if (fs.existsSync(customSeederTemplatePath)) {\n        notify(CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS);\n      } else {\n        // copy template\n        this._memFsEditor.copy(systemSeederTemplate, customSeederTemplatePath);\n        // commit changes\n        await this._commitMemFsChanges();\n\n        notify(CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS);\n      }\n    } catch (error) {\n      throw new InstallerError({\n        type: CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR,\n        payload,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Write the config into the user package.json\n   */\n  async _writeUserGeneratorConfigToPackageJson() {\n    const {\n      WRITE_USER_GENERETOR_CONFIG_START,\n      WRITE_USER_GENERETOR_CONFIG_SUCCESS,\n      WRITE_USER_GENERETOR_CONFIG_ERROR,\n    } = Installer.operations;\n\n    const { userPackageJsonPath: packageJsonPath } = this.config;\n\n    const payload = { packageJsonPath };\n\n    try {\n      this._subject.next({ type: WRITE_USER_GENERETOR_CONFIG_START, payload });\n\n      const packageJson = require(packageJsonPath);\n      packageJson.mdSeed = this.getGeneratorConfig();\n\n      this._memFsEditor.writeJSON(packageJsonPath, packageJson);\n\n      await this._commitMemFsChanges();\n\n      this._subject.next({\n        type: WRITE_USER_GENERETOR_CONFIG_SUCCESS,\n        payload,\n      });\n    } catch (error) {\n      throw new InstallerError({\n        type: WRITE_USER_GENERETOR_CONFIG_ERROR,\n        payload,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Create the seeders folder\n   */\n  async _createSeedersFolder() {\n    const {\n      CREATE_SEEDERS_FOLDER_START,\n      CREATE_SEEDERS_FOLDER_SUCCESS,\n      CREATE_SEEDERS_FOLDER_ERROR,\n      CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS,\n    } = Installer.operations;\n\n    const {\n      userSeedersFolderPath: folderpath,\n      userSeedersFolderName: foldername,\n    } = this.config;\n\n    const payload = { folderpath, foldername };\n\n    try {\n      this._subject.next({ type: CREATE_SEEDERS_FOLDER_START, payload });\n\n      if (fs.existsSync(folderpath)) {\n        this._subject.next({\n          type: CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS,\n          payload,\n        });\n      } else {\n        fs.mkdirSync(folderpath);\n\n        this._subject.next({ type: CREATE_SEEDERS_FOLDER_SUCCESS, payload });\n      }\n    } catch (error) {\n      throw new InstallerError({\n        type: CREATE_SEEDERS_FOLDER_ERROR,\n        payload,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Write the `md-seed-config.js` into the root folder\n   */\n  async _writeUserConfig() {\n    const {\n      WRITE_USER_CONFIG_START,\n      WRITE_USER_CONFIG_SUCCESS,\n      WRITE_USER_CONFIG_ERROR,\n      WRITE_USER_CONFIG_SKIP_FILE_EXISTS,\n    } = Installer.operations;\n\n    const {\n      userConfigExists: fileExists,\n      userConfigFilename: filename,\n      userConfigFilepath: filepath,\n      configTemplatePath,\n    } = this.config;\n\n    const payload = { fileExists, filename, filepath };\n\n    try {\n      this._subject.next({ type: WRITE_USER_CONFIG_START, payload });\n\n      if (fileExists === true) {\n        this._subject.next({\n          type: WRITE_USER_CONFIG_SKIP_FILE_EXISTS,\n          payload,\n        });\n      } else {\n        // copy template\n        this._memFsEditor.copy(configTemplatePath, filepath);\n        // commit changes\n        await this._commitMemFsChanges();\n\n        this._subject.next({ type: WRITE_USER_CONFIG_SUCCESS, payload });\n      }\n    } catch (error) {\n      throw new InstallerError({\n        type: WRITE_USER_CONFIG_ERROR,\n        payload,\n        error,\n      });\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "Installer",
    "memberof": "src/lib/core/installer.js",
    "static": true,
    "longname": "src/lib/core/installer.js~Installer",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/core/installer.js",
    "importStyle": "Installer",
    "description": "mongoose-data-seed installer",
    "examples": [
      "// create installer\nconst installer = new Installer({ seedersFolder: './seeders' });\n\n// run seeders\nconst observable = installer.install();\n\n// subscribe logger\nobservable.subscribe({\n  next({ type, payload }) {\n    switch (type) {\n      case Installer.operations.START:\n        console.log('Installer started!');\n        break;\n      case Installer.operations.SUCCESS:\n        console.log('Installer finished successfully!');\n        break;\n    }\n  },\n  error({ type, payload }) {\n    console.error(`Error: ${type}`);\n    console.error(payload.error);\n  }\n});"
    ],
    "lineNumber": 40,
    "interface": false
  },
  {
    "__docId__": 162,
    "kind": "typedef",
    "name": "InstallerConfig",
    "memberof": "src/lib/core/installer.js~Installer",
    "static": true,
    "longname": "src/lib/core/installer.js~Installer.InstallerConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seedersFolder",
        "description": "Relative path to your seeders-folder."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "customSeederTemplate",
        "description": "Relative path to your seeder-template\n                                         if you would like to use your own seeders-template"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "InstallerConfig"
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "operations",
    "memberof": "src/lib/core/installer.js~Installer",
    "static": true,
    "longname": "src/lib/core/installer.js~Installer.operations",
    "access": "public",
    "description": "Installer operations constants",
    "lineNumber": 55,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "START",
        "description": "Installation starts."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "SUCCESS",
        "description": "Installation succeed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ERROR",
        "description": "Installation finished with an error."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#constructor",
    "access": "public",
    "description": "Creates mongoose-data-seed installer",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "InstallerConfig"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "Generator config"
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "_subject",
    "memberof": "src/lib/core/installer.js~Installer",
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_subject",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "install",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#install",
    "access": "public",
    "description": "Run installer - install `mongoose-data-seeder`",
    "see": [
      "https://rxjs-dev.firebaseapp.com/api/index/class/Observable"
    ],
    "lineNumber": 105,
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getGeneratorConfig",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#getGeneratorConfig",
    "access": "public",
    "description": "get the config that should be written into the `package.json`",
    "lineNumber": 115,
    "return": {
      "nullable": null,
      "types": [
        "InstallerConfig"
      ],
      "spread": false,
      "description": "generator config"
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_initConfig",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_initConfig",
    "access": "private",
    "description": "Initiate this.config",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "InstallerConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "generator config"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "config",
    "memberof": "src/lib/core/installer.js~Installer",
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#config",
    "access": "public",
    "description": "Full configuration object",
    "lineNumber": 152,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userPackageJsonPath",
        "description": "path to the user package.json file."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "customSeederTemplateFilename",
        "description": "custom seeder template filename."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "customSeederTemplatePath",
        "description": "custom seeder template path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userSeedersFolderName",
        "description": "seeders folder name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userSeedersFolderPath",
        "description": "seeders folder path."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigExists",
        "description": "user has a config file?."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigFilename",
        "description": "config file name."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userConfigFilepath",
        "description": "config file path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configTemplatePath",
        "description": "config template path."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "_initMemFs",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_initMemFs",
    "access": "private",
    "description": "Initiate the in-memory file-system",
    "lineNumber": 171,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "_memFsEditor",
    "memberof": "src/lib/core/installer.js~Installer",
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_memFsEditor",
    "access": "private",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "_install",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_install",
    "access": "private",
    "description": "Run the installation process",
    "lineNumber": 180,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "_commitMemFsChanges",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_commitMemFsChanges",
    "access": "private",
    "description": "Commit the in-memory file changes",
    "lineNumber": 205,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_createCustomSeederTemplate",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_createCustomSeederTemplate",
    "access": "private",
    "description": "Copy the package seeder-template to the user desired\ncustom-seeder-template path if the user wants to use his own seeder-template",
    "lineNumber": 218,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "[description]"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "_writeUserGeneratorConfigToPackageJson",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_writeUserGeneratorConfigToPackageJson",
    "access": "private",
    "description": "Write the config into the user package.json",
    "lineNumber": 265,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "_createSeedersFolder",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_createSeedersFolder",
    "access": "private",
    "description": "Create the seeders folder",
    "lineNumber": 302,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_writeUserConfig",
    "memberof": "src/lib/core/installer.js~Installer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/installer.js~Installer#_writeUserConfig",
    "access": "private",
    "description": "Write the `md-seed-config.js` into the root folder",
    "lineNumber": 342,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/lib/core/installer.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport path from 'path';\n\nimport Subject from '../../__mocks__/rxjs-subject';\nimport fs, {\n  alreadyExistsFilename,\n  alreadyExistsPath,\n  throwableMkdirPath,\n} from '../../__mocks__/fs';\nimport memFs, { store } from '../../__mocks__/mem-fs';\nimport memFsEditor, {\n  fs as memFsEditorFs,\n} from '../../__mocks__/mem-fs-editor';\n\nimport { defaultUserGeneratorConfig, systemSeederTemplate } from '../constants';\nimport { mockImports, resetImports } from '../utils/test-helpers';\n\nimport InstallerError from './installer-error';\n\nimport Installer, { __RewireAPI__ as moduleRewireAPI } from './installer';\n\nconst helpData = {\n  seedersFolder: 'seeders-folder',\n  customSeederTemplate: 'some-template.js',\n};\n\nconst defaultConfig = {\n  projectRoot: '/project/root',\n  userConfigExists: true,\n  userConfigFilename: 'config-filename.js',\n  userConfigFilepath: '/project/root/config-filename.js',\n  configTemplate: '/template/folder/config-template.js',\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    Subject,\n    fs,\n    memFs,\n    editor: memFsEditor,\n    config: { ...defaultConfig },\n    getObjectWithSelectedKeys: sinon.stub(),\n    normalizeSeederName: sinon.stub().returnsArg(0),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('Should create a installer instance', t => {\n  sinon.stub(Installer.prototype, '_initConfig');\n  sinon.stub(Installer.prototype, '_initMemFs');\n\n  const installer = new Installer();\n\n  t.truthy(installer._subject);\n  t.is(typeof installer.install, 'function');\n  t.true(\n    installer._initConfig.calledWith({\n      ...defaultUserGeneratorConfig,\n      customSeederTemplate: undefined,\n    })\n  );\n  t.true(installer._initMemFs.called);\n\n  Installer.prototype._initConfig.restore();\n  Installer.prototype._initMemFs.restore();\n});\n\ntest('Should create a installer instance with args', t => {\n  sinon.stub(Installer.prototype, '_initConfig');\n  sinon.stub(Installer.prototype, '_initMemFs');\n\n  const installer = new Installer({ ...helpData });\n\n  t.truthy(installer._subject);\n  t.is(typeof installer.install, 'function');\n  t.true(installer._initConfig.calledWith({ ...helpData }));\n  t.true(installer._initMemFs.called);\n\n  Installer.prototype._initConfig.restore();\n  Installer.prototype._initMemFs.restore();\n});\n\ntest('Should _initConfig', t => {\n  const context = {};\n  const _initConfig = Installer.prototype._initConfig.bind(context);\n\n  _initConfig({ ...helpData });\n\n  t.snapshot(context);\n});\n\ntest('Should _initConfig without customSeederTemplate', t => {\n  const context = {};\n  const _initConfig = Installer.prototype._initConfig.bind(context);\n\n  const config = { ...helpData };\n  delete config.customSeederTemplate;\n\n  _initConfig(config);\n\n  t.snapshot(context);\n});\n\ntest('Should _initMemFs', t => {\n  const { mocks } = t.context;\n\n  const context = {};\n  const _initMemFs = Installer.prototype._initMemFs.bind(context);\n\n  _initMemFs();\n\n  t.true(mocks.memFs.create.called);\n  t.true(mocks.editor.create.calledWith(store));\n  t.is(context._memFsEditor, memFsEditorFs);\n});\n\ntest('Should install', t => {\n  const context = {\n    _install: sinon.stub().resolves(),\n    _subject: { asObservable: () => 'observable' },\n  };\n  const install = Installer.prototype.install.bind(context);\n\n  const results = install();\n\n  t.is(results, 'observable');\n  t.true(context._install.called);\n});\n\ntest('Should getGeneratorConfig', t => {\n  const context = {\n    config: {\n      userSeedersFolderName: 'foldername',\n    },\n  };\n  const getGeneratorConfig = Installer.prototype.getGeneratorConfig.bind(\n    context\n  );\n\n  const expectedResults = {\n    seedersFolder: context.config.userSeedersFolderName,\n  };\n  const results = getGeneratorConfig();\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('Should getGeneratorConfig with customSeederTemplate', t => {\n  const context = {\n    config: {\n      userSeedersFolderName: 'foldername',\n      customSeederTemplateFilename: 'template-filename.js',\n    },\n  };\n  const getGeneratorConfig = Installer.prototype.getGeneratorConfig.bind(\n    context\n  );\n\n  const expectedResults = {\n    seedersFolder: context.config.userSeedersFolderName,\n    customSeederTemplate: context.config.customSeederTemplateFilename,\n  };\n  const results = getGeneratorConfig();\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('Should _install and success', async t => {\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().resolves(),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await _install();\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.true(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.true(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.true(context._subject.complete.called);\n  t.false(context._subject.error.called);\n});\n\ntest('Should _install and fail', async t => {\n  const error = new Error('some-error');\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().rejects(error),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await t.notThrowsAsync(() => _install());\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.false(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.false(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.false(context._subject.complete.called);\n  t.true(\n    context._subject.error.calledWith({ type: 'ERROR', payload: { error } })\n  );\n});\n\ntest('Should _install and fail with InstallerError', async t => {\n  const type = 'CREATE_SEEDERS_FOLDER_ERROR';\n  const payload = { some: 'data' };\n  const baseError = new Error('some-base-error');\n\n  const error = new InstallerError({ type, payload, error: baseError });\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().rejects(error),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await _install();\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.false(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.false(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.false(context._subject.complete.called);\n  t.true(\n    context._subject.error.calledWith({\n      type,\n      payload: { ...payload, error: baseError },\n    })\n  );\n});\n\ntest('Should _commitMemFsChanges', async t => {\n  const context = {\n    _memFsEditor: { commit: sinon.stub().callsArg(0) },\n  };\n  const _commitMemFsChanges = Installer.prototype._commitMemFsChanges.bind(\n    context\n  );\n\n  await _commitMemFsChanges();\n\n  t.true(context._memFsEditor.commit.called);\n});\n\ntest('Should _createCustomSeederTemplate and success', async t => {\n  const customSeederTemplateFilename = 'seeder-template.js';\n  const customSeederTemplatePath = `/some/${customSeederTemplateFilename}`;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrowsAsync(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      systemSeederTemplate,\n      customSeederTemplatePath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and skip because no custom seeder choosed', async t => {\n  const customSeederTemplateFilename = undefined;\n  const customSeederTemplatePath = undefined;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrows(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and skip because no the seeder template already exists', async t => {\n  const customSeederTemplateFilename = alreadyExistsFilename;\n  const customSeederTemplatePath = alreadyExistsPath;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrows(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and fail', async t => {\n  const customSeederTemplateFilename = 'seeder-template.js';\n  const customSeederTemplatePath = `/some/${customSeederTemplateFilename}`;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(() =>\n    _createCustomSeederTemplate()\n  );\n\n  t.is(rejectionError.type, 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.true(context._memFsEditor.copy.called);\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserGeneratorConfigToPackageJson and success', async t => {\n  const config = {\n    userPackageJsonPath: path.join(__dirname, './__mocks__/package.json'),\n  };\n  const generatorConfig = {\n    seedersFolder: '/some/folder',\n    customSeederTemplateFilename: 'some-filename.js',\n  };\n  const payload = {\n    packageJsonPath: config.userPackageJsonPath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { writeJSON: sinon.stub() },\n    getGeneratorConfig: () => generatorConfig,\n  };\n  const _writeUserGeneratorConfigToPackageJson = Installer.prototype._writeUserGeneratorConfigToPackageJson.bind(\n    context\n  );\n\n  await t.notThrowsAsync(() => _writeUserGeneratorConfigToPackageJson());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.writeJSON.calledWith(payload.packageJsonPath, {\n      mdSeed: generatorConfig,\n    })\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserGeneratorConfigToPackageJson and fail', async t => {\n  const config = {\n    userPackageJsonPath: path.join(__dirname, './__mocks__/package.json'),\n  };\n  const generatorConfig = {\n    seedersFolder: '/some/folder',\n    customSeederTemplateFilename: 'some-filename.js',\n  };\n  const payload = {\n    packageJsonPath: config.userPackageJsonPath,\n  };\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { writeJSON: sinon.stub() },\n    getGeneratorConfig: () => generatorConfig,\n  };\n  const _writeUserGeneratorConfigToPackageJson = Installer.prototype._writeUserGeneratorConfigToPackageJson.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(\n    _writeUserGeneratorConfigToPackageJson()\n  );\n\n  t.is(rejectionError.type, 'WRITE_USER_GENERETOR_CONFIG_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(context._memFsEditor.writeJSON.called);\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _createSeedersFolder and success', async t => {\n  const { mocks } = t.context;\n  const folderpath = '/some/folder/path/folder';\n  const foldername = folderpath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  await t.notThrows(() => _createSeedersFolder());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.true(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _createSeedersFolder and skip', async t => {\n  const { mocks } = t.context;\n  const folderpath = alreadyExistsPath;\n  const foldername = alreadyExistsPath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  await t.notThrows(() => _createSeedersFolder());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.false(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _createSeedersFolder and fail', async t => {\n  const { mocks } = t.context;\n  const folderpath = throwableMkdirPath;\n  const foldername = throwableMkdirPath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(() => _createSeedersFolder());\n\n  t.is(rejectionError.type, 'CREATE_SEEDERS_FOLDER_ERROR');\n  t.deepEqual(rejectionError.payload, {\n    ...payload,\n    error: new Error('some-error'),\n  });\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.true(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _writeUserConfig and success', async t => {\n  const config = {\n    userConfigExists: false,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  await t.notThrowsAsync(() => _writeUserConfig());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      config.configTemplatePath,\n      config.userConfigFilepath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserConfig and skip', async t => {\n  const config = {\n    userConfigExists: true,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  await t.notThrows(() => _writeUserConfig());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserConfig and fail', async t => {\n  const config = {\n    userConfigExists: false,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  const rejectionError = await t.throwsAsync(() => _writeUserConfig());\n\n  t.is(rejectionError.type, 'WRITE_USER_CONFIG_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      config.configTemplatePath,\n      config.userConfigFilepath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/core/installer.test.js",
    "static": true,
    "longname": "src/lib/core/installer.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/core/installer.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"seedersFolder\": string, \"customSeederTemplate\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "defaultConfig",
    "memberof": "src/lib/core/installer.test.js",
    "static": true,
    "longname": "src/lib/core/installer.test.js~defaultConfig",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/core/installer.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"projectRoot\": string, \"userConfigExists\": boolean, \"userConfigFilename\": string, \"userConfigFilepath\": string, \"configTemplate\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/lib/core/md-seed-runner-error.js",
    "content": "/**\n * MdSeedRunner Error\n */\nexport default class MdSeedRunnerError extends Error {\n  /**\n   * Creates an MdSeedRunnerError.\n   * @param {Object} [options={}]         options\n   * @param {String} [options.type='']    The error type key (MdSeedRunner.operations).\n   * @param {Object} [options.payload={}] A custom payload object.\n   * @param {Error}  [options.error={}]   Error object.\n   */\n  constructor({ type = '', payload = {}, error = {} } = {}) {\n    super(error.message || 'MdSeedRunnerError');\n\n    /**\n     * Error name.\n     * @type {String}\n     */\n    this.name = 'MdSeedRunnerError';\n    /**\n     * Error type (one of the MdSeedRunner.operations).\n     * @type {String}\n     */\n    this.type = type;\n    /**\n     * Custom payload object.\n     * @type {Object}\n     */\n    this.payload = { ...payload, error };\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner-error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "class",
    "name": "MdSeedRunnerError",
    "memberof": "src/lib/core/md-seed-runner-error.js",
    "static": true,
    "longname": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/core/md-seed-runner-error.js",
    "importStyle": "MdSeedRunnerError",
    "description": "MdSeedRunner Error",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError#constructor",
    "access": "public",
    "description": "Creates an MdSeedRunnerError.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "options.type",
        "description": "The error type key (MdSeedRunner.operations)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.payload",
        "description": "A custom payload object."
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.error",
        "description": "Error object."
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "name",
    "memberof": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError",
    "static": false,
    "longname": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError#name",
    "access": "public",
    "description": "Error name.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "type",
    "memberof": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError",
    "static": false,
    "longname": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError#type",
    "access": "public",
    "description": "Error type (one of the MdSeedRunner.operations).",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "payload",
    "memberof": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError",
    "static": false,
    "longname": "src/lib/core/md-seed-runner-error.js~MdSeedRunnerError#payload",
    "access": "public",
    "description": "Custom payload object.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/lib/core/md-seed-runner-error.test.js",
    "content": "import test from 'ava';\n\nimport MdSeedRunnerError from './md-seed-runner-error';\n\ntest('should create error', t => {\n  const error = new MdSeedRunnerError();\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with type', t => {\n  const type = 'some-type';\n  const error = new MdSeedRunnerError({ type });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, type);\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with payload', t => {\n  const payload = { some: 'payload' };\n  const error = new MdSeedRunnerError({ payload });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { ...payload, error: {} });\n});\n\ntest('should create error with inner error', t => {\n  const innerError = new Error('some-error');\n  const error = new MdSeedRunnerError({ error: innerError });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: innerError });\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner-error.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/lib/core/md-seed-runner.js",
    "content": "import { Subject } from 'rxjs';\n\nimport {\n  getObjectWithSelectedKeys,\n  normalizeSeederName,\n} from '../utils/helpers';\nimport MdSeedRunnerError from './md-seed-runner-error';\n\n/**\n * mongoose-data-seed runner\n */\nexport default class MdSeedRunner {\n  /**\n   * MdSeedRunner operations constants\n   * @type {Object}\n   * @property {string} START        MdSeedRunner starts.\n   * @property {string} SUCCESS      MdSeedRunner succeed.\n   * @property {string} ERROR        MdSeedRunner finished with an error.\n   */\n  static operations = {\n    START: 'START',\n    SUCCESS: 'SUCCESS',\n    ERROR: 'ERROR',\n    MONGOOSE_CONNECT_START: 'MONGOOSE_CONNECT_START',\n    MONGOOSE_CONNECT_SUCCESS: 'MONGOOSE_CONNECT_SUCCESS',\n    MONGOOSE_CONNECT_ERROR: 'MONGOOSE_CONNECT_ERROR',\n    MONGOOSE_DROP_START: 'MONGOOSE_DROP_START',\n    MONGOOSE_DROP_SUCCESS: 'MONGOOSE_DROP_SUCCESS',\n    MONGOOSE_DROP_ERROR: 'MONGOOSE_DROP_ERROR',\n    ALL_SEEDERS_START: 'ALL_SEEDERS_START',\n    ALL_SEEDERS_FINISH: 'ALL_SEEDERS_FINISH',\n    SEEDER_START: 'SEEDER_START',\n    SEEDER_SUCCESS: 'SEEDER_SUCCESS',\n    SEEDER_ERROR: 'SEEDER_ERROR',\n  };\n\n  /**\n   * Creates MdSeedRunner\n   * @param {Function<Promise>}     connect     Connect to mongodb implementation\n   * @param {Function<Promise>}     dropdb      Drop/Clear the database implementation\n   * @param {Map<string, Function>} seedersList key=Seeder name | value=Seeder implementation\n   */\n  constructor({ connect, dropdb, seedersList }) {\n    this.connect = connect;\n    this.dropdb = dropdb;\n    this.seedersList = seedersList;\n    this._subject = new Subject();\n  }\n\n  run({ selectedSeeders = [], dropDatabase = false } = {}) {\n    this._run({ selectedSeeders, dropDatabase });\n\n    return this._subject.asObservable();\n  }\n\n  /*\n    Private methods\n   */\n\n  async _run({ selectedSeeders, dropDatabase }) {\n    const { START, SUCCESS, ERROR } = MdSeedRunner.operations;\n\n    try {\n      this._subject.next({\n        type: START,\n        payload: { selectedSeeders, dropDatabase },\n      });\n\n      await this._connectToMongodb();\n\n      if (dropDatabase) {\n        await this._dropDatabase();\n      }\n\n      await this._runSeeders(selectedSeeders);\n\n      this._subject.next({\n        type: SUCCESS,\n        payload: { selectedSeeders, dropDatabase },\n      });\n\n      this._subject.complete();\n    } catch (error) {\n      const { type = ERROR, payload = { error } } = error;\n\n      this._subject.error({ type, payload });\n    }\n  }\n\n  async _connectToMongodb() {\n    const {\n      MONGOOSE_CONNECT_START,\n      MONGOOSE_CONNECT_SUCCESS,\n      MONGOOSE_CONNECT_ERROR,\n    } = MdSeedRunner.operations;\n\n    try {\n      this._subject.next({ type: MONGOOSE_CONNECT_START });\n\n      await this.connect();\n\n      this._subject.next({ type: MONGOOSE_CONNECT_SUCCESS });\n    } catch (error) {\n      throw new MdSeedRunnerError({ type: MONGOOSE_CONNECT_ERROR, error });\n    }\n  }\n\n  async _dropDatabase() {\n    const {\n      MONGOOSE_DROP_START,\n      MONGOOSE_DROP_SUCCESS,\n      MONGOOSE_DROP_ERROR,\n    } = MdSeedRunner.operations;\n\n    try {\n      this._subject.next({ type: MONGOOSE_DROP_START });\n\n      await this.dropdb();\n\n      this._subject.next({ type: MONGOOSE_DROP_SUCCESS });\n    } catch (error) {\n      throw new MdSeedRunnerError({ type: MONGOOSE_DROP_ERROR, error });\n    }\n  }\n\n  async _runSeeders(selectedSeeders) {\n    const { ALL_SEEDERS_START, ALL_SEEDERS_FINISH } = MdSeedRunner.operations;\n\n    const seeders = this._loadSelectedSeeders(selectedSeeders);\n\n    this._subject.next({\n      type: ALL_SEEDERS_START,\n      payload: { seeders: Object.keys(seeders) },\n    });\n\n    for (const [name, Seeder] of Object.entries(seeders)) {\n      await this._runSeeder({ name, Seeder });\n    }\n\n    this._subject.next({\n      type: ALL_SEEDERS_FINISH,\n      payload: { seeders: Object.keys(seeders) },\n    });\n  }\n\n  async _runSeeder({ Seeder, name }) {\n    const {\n      SEEDER_START,\n      SEEDER_SUCCESS,\n      SEEDER_ERROR,\n    } = MdSeedRunner.operations;\n\n    try {\n      this._subject.next({\n        type: SEEDER_START,\n        payload: { name },\n      });\n\n      const seeder = new Seeder();\n      const results = await seeder.seed();\n\n      this._subject.next({ type: SEEDER_SUCCESS, payload: { name, results } });\n    } catch (error) {\n      throw new MdSeedRunnerError({\n        type: SEEDER_ERROR,\n        payload: { name },\n        error,\n      });\n    }\n  }\n\n  _loadSelectedSeeders(selectedSeeders) {\n    if (selectedSeeders && selectedSeeders.length > 0) {\n      return getObjectWithSelectedKeys(\n        this.seedersList,\n        selectedSeeders.map(name => normalizeSeederName(name))\n      );\n    }\n\n    return this.seedersList;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "class",
    "name": "MdSeedRunner",
    "memberof": "src/lib/core/md-seed-runner.js",
    "static": true,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/core/md-seed-runner.js",
    "importStyle": "MdSeedRunner",
    "description": "mongoose-data-seed runner",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "operations",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "static": true,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner.operations",
    "access": "public",
    "description": "MdSeedRunner operations constants",
    "lineNumber": 20,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "START",
        "description": "MdSeedRunner starts."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "SUCCESS",
        "description": "MdSeedRunner succeed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ERROR",
        "description": "MdSeedRunner finished with an error."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#constructor",
    "access": "public",
    "description": "Creates MdSeedRunner",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function<Promise>"
        ],
        "spread": false,
        "optional": false,
        "name": "connect",
        "description": "Connect to mongodb implementation"
      },
      {
        "nullable": null,
        "types": [
          "Function<Promise>"
        ],
        "spread": false,
        "optional": false,
        "name": "dropdb",
        "description": "Drop/Clear the database implementation"
      },
      {
        "nullable": null,
        "types": [
          "Map<string, Function>"
        ],
        "spread": false,
        "optional": false,
        "name": "seedersList",
        "description": "key=Seeder name | value=Seeder implementation"
      }
    ]
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "connect",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#connect",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "dropdb",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#dropdb",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "seedersList",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#seedersList",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "_subject",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_subject",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "run",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#run",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"selectedSeeders\": *, \"dropDatabase\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "_run",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_run",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"selectedSeeders\": *, \"dropDatabase\": *}"
        ],
        "defaultRaw": {
          "selectedSeeders": null,
          "dropDatabase": null
        },
        "defaultValue": "{\"selectedSeeders\":null,\"dropDatabase\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "_connectToMongodb",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_connectToMongodb",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_dropDatabase",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_dropDatabase",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "_runSeeders",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_runSeeders",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "selectedSeeders",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "_runSeeder",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_runSeeder",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"Seeder\": *, \"name\": *}"
        ],
        "defaultRaw": {
          "Seeder": null,
          "name": null
        },
        "defaultValue": "{\"Seeder\":null,\"name\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "_loadSelectedSeeders",
    "memberof": "src/lib/core/md-seed-runner.js~MdSeedRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/md-seed-runner.js~MdSeedRunner#_loadSelectedSeeders",
    "access": "private",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "selectedSeeders",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/lib/core/md-seed-runner.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport { toArray } from 'rxjs/operators';\n\nimport { mockImports, resetImports } from '../utils/test-helpers';\n\nimport MdSeedRunnerError from './md-seed-runner-error';\n\nimport MdSeedRunner, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './md-seed-runner';\n\nconst helpData = {\n  connect: sinon.stub().resolves(),\n  dropdb: sinon.stub().resolves(),\n  seedersList: {\n    Users: 'users-seeder',\n    Posts: 'posts-seeder',\n  },\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getObjectWithSelectedKeys: sinon.stub(),\n    normalizeSeederName: sinon.stub().returnsArg(0),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('Should create a run-logger instance', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  t.is(seedRunner.connect, helpData.connect);\n  t.is(seedRunner.dropdb, helpData.dropdb);\n  t.is(seedRunner.seedersList, helpData.seedersList);\n  t.is(typeof seedRunner.run, 'function');\n});\n\ntest('Should run', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_run');\n\n  const observable = seedRunner.run();\n\n  t.true(\n    seedRunner._run.calledWith({ selectedSeeders: [], dropDatabase: false })\n  );\n  t.is(typeof observable.subscribe, 'function');\n});\n\ntest('Should run with args', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_run');\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  const observable = seedRunner.run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._run.calledWith({ selectedSeeders, dropDatabase }));\n  t.is(typeof observable.subscribe, 'function');\n});\n\ntest('Should _run', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').resolves();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = false;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.true(seedRunner._runSeeders.calledWith(selectedSeeders));\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and drop database', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').resolves();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.true(seedRunner._runSeeders.calledWith(selectedSeeders));\n  t.true(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and fail', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').rejects();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .catch(error => t.snapshot(error));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.false(seedRunner._runSeeders.called);\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and fail with type and payload', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const error = new MdSeedRunnerError({\n    type: 'some-type',\n    payload: { some: 'data' },\n    error: new Error('some error message'),\n  });\n\n  sinon.stub(seedRunner, '_connectToMongodb').rejects(error);\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .catch(error => t.snapshot(error));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.false(seedRunner._runSeeders.called);\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _connectToMongodb', async t => {\n  t.plan(2);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._connectToMongodb();\n\n  seedRunner._subject.complete();\n\n  t.true(helpData.connect.called);\n});\n\ntest('Should _connectToMongodb and fail', async t => {\n  t.plan(3);\n\n  const data = {\n    ...helpData,\n    connect: sinon.stub().rejects(new Error('some-error')),\n  };\n\n  const seedRunner = new MdSeedRunner({ ...data });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._connectToMongodb();\n  } catch (error) {\n    t.snapshot(error, 'connect to mongodb error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(data.connect.called);\n});\n\ntest('Should _dropDatabase', async t => {\n  t.plan(2);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._dropDatabase();\n\n  seedRunner._subject.complete();\n\n  t.true(helpData.dropdb.called);\n});\n\ntest('Should _dropDatabase and fail', async t => {\n  t.plan(3);\n\n  const data = {\n    ...helpData,\n    dropdb: sinon.stub().rejects(new Error('some-error')),\n  };\n\n  const seedRunner = new MdSeedRunner({ ...data });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._dropDatabase();\n  } catch (error) {\n    t.snapshot(error, 'dropdb error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(data.dropdb.called);\n});\n\ntest('Should _runSeeders', async t => {\n  t.plan(3);\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon\n    .stub(seedRunner, '_loadSelectedSeeders')\n    .withArgs(selectedSeeders)\n    .returns(selectedSeeders);\n  sinon.stub(seedRunner, '_runSeeder').resolves();\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  await seedRunner._runSeeders(selectedSeeders);\n\n  seedRunner._subject.complete();\n\n  t.true(seedRunner._loadSelectedSeeders.calledWith(selectedSeeders));\n  t.snapshot(seedRunner._runSeeder.args, '_runSeeder args');\n});\n\ntest('Should _runSeeder', async t => {\n  t.plan(3);\n\n  const name = 'User';\n  const Seeder = sinon.stub();\n  Seeder.prototype.seed = sinon.stub().resolves('some-results');\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  await seedRunner._runSeeder({ Seeder, name });\n\n  seedRunner._subject.complete();\n\n  t.true(Seeder.called);\n  t.true(Seeder.prototype.seed.called);\n});\n\ntest('Should _runSeeder and fail', async t => {\n  t.plan(4);\n\n  const name = 'User';\n  const Seeder = sinon.stub();\n  Seeder.prototype.seed = sinon.stub().rejects(new Error('some-error'));\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._runSeeder({ Seeder, name });\n  } catch (error) {\n    t.snapshot(error, '_runSeeder error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(Seeder.called);\n  t.true(Seeder.prototype.seed.called);\n});\n\ntest('should _loadSelectedSeeders with no args', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const selectedSeeders = seedRunner._loadSelectedSeeders();\n\n  t.is(selectedSeeders, helpData.seedersList);\n});\n\ntest('should _loadSelectedSeeders with empty array', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const selectedSeeders = seedRunner._loadSelectedSeeders([]);\n\n  t.is(selectedSeeders, helpData.seedersList);\n});\n\ntest('should _loadSelectedSeeders', t => {\n  const { getObjectWithSelectedKeys } = t.context.mocks;\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._loadSelectedSeeders(['User']);\n\n  t.true(getObjectWithSelectedKeys.calledWith(helpData.seedersList, ['User']));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "helpData",
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~helpData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/core/md-seed-runner.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"connect\": *, \"dropdb\": *, \"seedersList\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/lib/core/seeder-generator.js",
    "content": "import path from 'path';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\nimport chalk from 'chalk';\n\nimport {\n  getFolderNameFromPath,\n  normalizeSeederName,\n  normalizeSeederFileName,\n} from '../utils/helpers';\n\n/**\n * Seeder Generator\n *\n * Generate a new seeder\n */\nexport default class SeederGenerator {\n  constructor({ name, seederTemplate, userSeedersFolderPath }) {\n    this._initOptions({ seederTemplate, userSeedersFolderPath });\n    this._initMemFs();\n    this._initName(name);\n  }\n\n  /**\n   * generate the new seeder\n   */\n  async generate() {\n    this._validateSeederFileNotExists();\n\n    this._copySeederTemplate();\n\n    await this._commitMemFsChanges();\n\n    return this.seederFileRelativePath;\n  }\n\n  /**\n   * Private\n   */\n\n  _initOptions({ seederTemplate, userSeedersFolderPath }) {\n    const userSeedersFolderName = getFolderNameFromPath(userSeedersFolderPath);\n\n    this.options = {\n      seederTemplate,\n      userSeedersFolderName,\n      userSeedersFolderPath,\n    };\n  }\n\n  _initMemFs() {\n    const store = memFs.create();\n    this.fs = editor.create(store);\n  }\n\n  _initName(name) {\n    const { userSeedersFolderPath, userSeedersFolderName } = this.options;\n\n    // set name\n    this.name = name;\n    // set seeder-name\n    this.seederName = normalizeSeederName(name);\n    // set seeder-file-name\n    this.seederFileName = normalizeSeederFileName(name);\n    // set seeder-file-path\n    this.seederFilePath = path.join(userSeedersFolderPath, this.seederFileName);\n\n    // set seeder-file-relative-path\n    this.seederFileRelativePath = path.join(\n      userSeedersFolderName,\n      this.seederFileName\n    );\n  }\n\n  _validateSeederFileNotExists() {\n    if (this.fs.exists(this.seederFilePath)) {\n      throw new Error(\n        `${chalk.red('ERROR')}\n         ${this.seederFileRelativePath} are already exists`\n      );\n    }\n  }\n\n  async _commitMemFsChanges() {\n    return new Promise(resolve => {\n      this.fs.commit(() => {\n        resolve();\n      });\n    });\n  }\n\n  _copySeederTemplate() {\n    const { seederName, seederFilePath } = this;\n    const { seederTemplate } = this.options;\n\n    const templateArgs = { seederName };\n\n    this.fs.copyTpl(seederTemplate, seederFilePath, templateArgs);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/seeder-generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "SeederGenerator",
    "memberof": "src/lib/core/seeder-generator.js",
    "static": true,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/core/seeder-generator.js",
    "importStyle": "SeederGenerator",
    "description": "Seeder Generator\n\nGenerate a new seeder",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "generate",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#generate",
    "access": "public",
    "description": "generate the new seeder",
    "lineNumber": 27,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_initOptions",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_initOptions",
    "access": "private",
    "description": "Private",
    "lineNumber": 41,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"seederTemplate\": *, \"userSeedersFolderPath\": *}"
        ],
        "defaultRaw": {
          "seederTemplate": null,
          "userSeedersFolderPath": null
        },
        "defaultValue": "{\"seederTemplate\":null,\"userSeedersFolderPath\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "options",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#options",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{\"seederTemplate\": *, \"userSeedersFolderName\": *, \"userSeedersFolderPath\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "_initMemFs",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_initMemFs",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "fs",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#fs",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "_initName",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_initName",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "name",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#name",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "seederName",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#seederName",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "seederFileName",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#seederFileName",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "seederFilePath",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#seederFilePath",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "seederFileRelativePath",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#seederFileRelativePath",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "_validateSeederFileNotExists",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_validateSeederFileNotExists",
    "access": "private",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "_commitMemFsChanges",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_commitMemFsChanges",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "_copySeederTemplate",
    "memberof": "src/lib/core/seeder-generator.js~SeederGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/core/seeder-generator.js~SeederGenerator#_copySeederTemplate",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "src/lib/core/seeder-generator.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport path from 'path';\n\nimport SeederGenerator, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './seeder-generator';\n\nconst helperData = {\n  name: 'some-name',\n  seederName: 'SomeName',\n  seederFileName: 'some-name.seeder.js',\n  seederFilePath: 'some/path/some-name.seeder.js',\n  seederFileRelativePath: 'some/relative-path/some-name.seeder.js',\n  seederTemplate: 'some template',\n  userSeedersFolderPath: 'some/path/for/seeders',\n  userSeedersFolderName: 'some-folder-name',\n};\n\ntest('should create a new instance of SeederGenerator', t => {\n  const createStubs = () => {\n    sinon.stub(SeederGenerator.prototype, '_initOptions');\n    sinon.stub(SeederGenerator.prototype, '_initMemFs');\n    sinon.stub(SeederGenerator.prototype, '_initName');\n  };\n  const restoreStubs = () => {\n    SeederGenerator.prototype._initOptions.restore();\n    SeederGenerator.prototype._initMemFs.restore();\n    SeederGenerator.prototype._initName.restore();\n  };\n\n  createStubs();\n\n  const { name, seederTemplate, userSeedersFolderPath } = helperData;\n\n  const generator = new SeederGenerator({\n    name,\n    seederTemplate,\n    userSeedersFolderPath,\n  });\n\n  t.true(\n    generator._initOptions.calledWith({\n      seederTemplate,\n      userSeedersFolderPath,\n    })\n  );\n  t.true(generator._initMemFs.called);\n  t.true(generator._initName.calledWith(name));\n\n  restoreStubs();\n});\n\ntest('should generate Seeder', async t => {\n  const { seederFileRelativePath } = helperData;\n\n  const context = {\n    seederFileRelativePath,\n    _validateSeederFileNotExists: sinon.stub(),\n    _copySeederTemplate: sinon.stub(),\n    _commitMemFsChanges: sinon.stub().resolves(),\n  };\n\n  const result = await SeederGenerator.prototype.generate.call(context);\n\n  t.true(context._validateSeederFileNotExists.called);\n  t.true(context._copySeederTemplate.called);\n  t.true(context._commitMemFsChanges.called);\n\n  t.is(result, context.seederFileRelativePath);\n});\n\ntest('should init options', t => {\n  const createStubs = ({ getFolderNameFromPath }) => {\n    moduleRewireAPI.__Rewire__('getFolderNameFromPath', getFolderNameFromPath);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('getFolderNameFromPath');\n  };\n\n  const {\n    seederTemplate,\n    userSeedersFolderPath,\n    userSeedersFolderName,\n  } = helperData;\n\n  const getFolderNameFromPath = sinon\n    .stub()\n    .withArgs(userSeedersFolderPath)\n    .returns(userSeedersFolderName);\n\n  createStubs({ getFolderNameFromPath });\n\n  const context = {};\n\n  SeederGenerator.prototype._initOptions.call(context, {\n    seederTemplate,\n    userSeedersFolderPath,\n  });\n\n  t.true(getFolderNameFromPath.calledWith(userSeedersFolderPath));\n  t.deepEqual(context, {\n    options: {\n      seederTemplate,\n      userSeedersFolderName,\n      userSeedersFolderPath,\n    },\n  });\n\n  restoreStubs();\n});\n\ntest('should init memFs', t => {\n  const createStubs = ({ memFs, editor }) => {\n    moduleRewireAPI.__Rewire__('memFs', memFs);\n    moduleRewireAPI.__Rewire__('editor', editor);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('memFs');\n    moduleRewireAPI.__ResetDependency__('editor');\n  };\n\n  const store = 'some store';\n  const fs = 'some fs';\n\n  const memFs = { create: sinon.stub().returns(store) };\n  const editor = {\n    create: sinon\n      .stub()\n      .withArgs(store)\n      .returns(fs),\n  };\n\n  createStubs({ memFs, editor });\n\n  const context = {};\n\n  SeederGenerator.prototype._initMemFs.call(context);\n\n  t.true(memFs.create.called);\n  t.true(editor.create.calledWith(store));\n  t.deepEqual(context, { fs });\n\n  restoreStubs();\n});\n\ntest('should init name', t => {\n  const {\n    name,\n    seederName,\n    seederFileName,\n    userSeedersFolderPath,\n    userSeedersFolderName,\n  } = helperData;\n\n  const seederFilePath = path.join(userSeedersFolderPath, seederFileName);\n  const seederFileRelativePath = path.join(\n    userSeedersFolderName,\n    seederFileName\n  );\n\n  const context = { options: { userSeedersFolderPath, userSeedersFolderName } };\n  const expectedContext = Object.assign({}, context, {\n    name,\n    seederName,\n    seederFileName,\n    seederFilePath,\n    seederFileRelativePath,\n  });\n\n  SeederGenerator.prototype._initName.call(context, name);\n\n  t.deepEqual(context, expectedContext);\n});\n\ntest('_validateSeederFileNotExists should throw error when seeder file are already exists', t => {\n  const { seederFilePath, seederFileRelativePath } = helperData;\n\n  const fs = { exists: () => true };\n  const context = { fs, seederFilePath, seederFileRelativePath };\n\n  t.throws(\n    () => SeederGenerator.prototype._validateSeederFileNotExists.call(context),\n    Error\n  );\n});\n\ntest('_validateSeederFileNotExists should not throw error when seeder file are not exists', t => {\n  const { seederFilePath, seederFileRelativePath } = helperData;\n\n  const fs = { exists: () => false };\n  const context = { fs, seederFilePath, seederFileRelativePath };\n\n  t.notThrows(() =>\n    SeederGenerator.prototype._validateSeederFileNotExists.call(context)\n  );\n});\n\ntest('should commit memFs changes', async t => {\n  const fs = { commit: sinon.stub().callsArg(0) };\n\n  const context = { fs };\n\n  await SeederGenerator.prototype._commitMemFsChanges.call(context);\n\n  t.true(fs.commit.called);\n});\n\ntest('should copy seeder template', async t => {\n  const { seederName, seederTemplate, seederFilePath } = helperData;\n\n  const fs = { copyTpl: sinon.spy() };\n  const context = {\n    fs,\n    seederName,\n    seederFilePath,\n    options: { seederTemplate },\n  };\n\n  SeederGenerator.prototype._copySeederTemplate.call(context);\n\n  t.true(fs.copyTpl.calledWith(seederTemplate, seederFilePath, { seederName }));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/seeder-generator.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "helperData",
    "memberof": "src/lib/core/seeder-generator.test.js",
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~helperData",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/lib/core/seeder-generator.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": string, \"seederName\": string, \"seederFileName\": string, \"seederFilePath\": string, \"seederFileRelativePath\": string, \"seederTemplate\": string, \"userSeedersFolderPath\": string, \"userSeedersFolderName\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "src/lib/index.js",
    "content": "export { default as config } from './config';\nexport * from './core';\nexport * from './utils';\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/lib/utils/base-logger.js",
    "content": "/**\n * Base Logger\n */\nexport default class BaseLogger {\n  /**\n   * Get the logger as observer\n   * @return {Object} observer\n   * @property {Function} next\n   * @property {Function} error\n   * @property {Function} complete\n   */\n  asObserver() {\n    return {\n      next: (...args) => this.next(...args),\n      error: (...args) => this.error(...args),\n      complete: (...args) => this.complete(...args),\n    };\n  }\n\n  next() {}\n\n  error() {}\n\n  complete() {}\n}\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/base-logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "BaseLogger",
    "memberof": "src/lib/utils/base-logger.js",
    "static": true,
    "longname": "src/lib/utils/base-logger.js~BaseLogger",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/base-logger.js",
    "importStyle": "BaseLogger",
    "description": "Base Logger",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "asObserver",
    "memberof": "src/lib/utils/base-logger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/base-logger.js~BaseLogger#asObserver",
    "access": "public",
    "description": "Get the logger as observer",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "complete",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "observer"
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "next",
    "memberof": "src/lib/utils/base-logger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/base-logger.js~BaseLogger#next",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "error",
    "memberof": "src/lib/utils/base-logger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/base-logger.js~BaseLogger#error",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "complete",
    "memberof": "src/lib/utils/base-logger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/base-logger.js~BaseLogger#complete",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/lib/utils/base-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport BaseLogger from './base-logger';\n\ntest('Should create a installer-logger instance', t => {\n  const logger = new BaseLogger();\n\n  logger.next();\n  logger.error();\n  logger.complete();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest('Should return observer', t => {\n  const context = {\n    next: sinon.stub(),\n    error: sinon.stub(),\n    complete: sinon.stub(),\n  };\n\n  const observer = BaseLogger.prototype.asObserver.call(context);\n\n  const nextArgs = ['some', 'args', 'next'];\n  const errorArgs = ['some', 'args', 'error'];\n  const completeArgs = ['some', 'args', 'complete'];\n\n  observer.next(...nextArgs);\n  observer.error(...errorArgs);\n  observer.complete(...completeArgs);\n\n  t.true(context.next.calledWith(...nextArgs));\n  t.true(context.error.calledWith(...errorArgs));\n  t.true(context.complete.calledWith(...completeArgs));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/base-logger.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/lib/utils/constants.js",
    "content": "/**\n * System exit codes\n *\n * Map exit code key to exit code number\n * @type {Map<string, number>}\n */\nexport const ExitCodes = {\n  Success: 0,\n  Error: 1,\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "ExitCodes",
    "memberof": "src/lib/utils/constants.js",
    "static": true,
    "longname": "src/lib/utils/constants.js~ExitCodes",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/constants.js",
    "importStyle": "{ExitCodes}",
    "description": "System exit codes\n\nMap exit code key to exit code number",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/lib/utils/helpers.js",
    "content": "import { trim, upperFirst, camelCase, kebabCase } from 'lodash';\n\nimport config from '../config';\nimport { ExitCodes } from './constants';\n\n/**\n * Normalize seeder name.\n * @param  {string} name seeder name\n * @return {string}      normalized seeder name\n */\nexport const normalizeSeederName = name => upperFirst(camelCase(name));\n/**\n * Normalize seeder filename.\n * @param  {string} name seeder name\n * @return {string}      normalized seeder filename\n */\nexport const normalizeSeederFileName = name => `${kebabCase(name)}.seeder.js`;\n/**\n * Get folder name from given path.\n * @param  {string} path path\n * @return {string}      folder name\n */\nexport const getFolderNameFromPath = path =>\n  path.substring(path.lastIndexOf('/') + 1);\n/**\n * Get object with selected keys from a given object.\n * @param  {Object}   obj  Object\n * @param  {string[]} keys Keys to get from the given object.\n * @return {Object} new object with the selected keys.\n */\nexport const getObjectWithSelectedKeys = (obj, keys) => {\n  const newObj = {};\n\n  Object.keys(obj).forEach(k => {\n    if (keys.includes(k)) {\n      newObj[k] = obj[k];\n    }\n  });\n\n  return newObj;\n};\n/**\n * Validate seeders folder name.\n * @param  {string} name folder name\n * @return {boolean}\n */\nexport const validateSeedersFolderName = name =>\n  typeof name === 'string' && trim(name).length >= 3;\n/**\n * Validate seeder template path.\n * @param  {string} name path\n * @return {boolean}\n */\nexport const validateSeederTemplatePath = name =>\n  typeof name === 'string' && trim(name).length >= 6;\n/**\n * Validate user config.\n * @throws {Error} throw error when user config is not valid.\n */\nexport const validateUserConfig = () => {\n  const { userConfigExists } = config;\n\n  if (!userConfigExists) {\n    throw new Error(\n      'Must contain md-seed-config.js at the project root. run `md-seed init` to create the config file.'\n    );\n  }\n};\n/**\n * Exit mongoose-data-seed.\n * @param  {Error} [error] Exit with error when supplied.\n */\nexport const exit = error => {\n  if (error && error.message && error.message !== 'exit') {\n    console.error(error);\n    process.exit(ExitCodes.Error);\n  } else {\n    process.exit(ExitCodes.Success);\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "normalizeSeederName",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~normalizeSeederName",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{normalizeSeederName}",
    "description": "Normalize seeder name.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "seeder name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "normalized seeder name"
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "normalizeSeederFileName",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~normalizeSeederFileName",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{normalizeSeederFileName}",
    "description": "Normalize seeder filename.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "seeder name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "normalized seeder filename"
    }
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "getFolderNameFromPath",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~getFolderNameFromPath",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{getFolderNameFromPath}",
    "description": "Get folder name from given path.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "folder name"
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "getObjectWithSelectedKeys",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~getObjectWithSelectedKeys",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{getObjectWithSelectedKeys}",
    "description": "Get object with selected keys from a given object.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "Keys to get from the given object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "new object with the selected keys."
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "validateSeedersFolderName",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~validateSeedersFolderName",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{validateSeedersFolderName}",
    "description": "Validate seeders folder name.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "folder name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "validateSeederTemplatePath",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~validateSeederTemplatePath",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{validateSeederTemplatePath}",
    "description": "Validate seeder template path.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "validateUserConfig",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~validateUserConfig",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{validateUserConfig}",
    "description": "Validate user config.",
    "lineNumber": 60,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throw error when user config is not valid."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "exit",
    "memberof": "src/lib/utils/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/helpers.js~exit",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/helpers.js",
    "importStyle": "{exit}",
    "description": "Exit mongoose-data-seed.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "error",
        "description": "Exit with error when supplied."
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "src/lib/utils/helpers.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { ExitCodes } from './constants';\nimport {\n  getFolderNameFromPath,\n  getObjectWithSelectedKeys,\n  validateSeedersFolderName,\n  validateSeederTemplatePath,\n  validateUserConfig,\n  exit,\n  __RewireAPI__ as moduleRewireAPI,\n} from './helpers';\n\ntest('should get folder name from path', t => {\n  t.is(getFolderNameFromPath('some/path/with/folder'), 'folder');\n});\n\ntest('should get similar object with the selected keys', t => {\n  const testObj = {\n    key1: '',\n    key2: '',\n    key3: '',\n  };\n\n  const results = getObjectWithSelectedKeys(testObj, ['key1', 'key3']);\n  const expectedResults = { key1: testObj.key1, key3: testObj.key3 };\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('should validate seeders folder name', t => {\n  t.true(validateSeedersFolderName('folder-name'));\n  t.true(validateSeedersFolderName('sed'));\n  t.false(validateSeedersFolderName('se'));\n  t.false(validateSeedersFolderName('   se  '));\n  t.false(validateSeedersFolderName());\n});\n\ntest('should validate seeder template path', t => {\n  t.true(validateSeederTemplatePath('file-name.js'));\n  t.true(validateSeederTemplatePath('sedsed'));\n  t.false(validateSeederTemplatePath('abcde'));\n  t.false(validateSeederTemplatePath('   abcde  '));\n  t.false(validateSeederTemplatePath());\n});\n\ntest('should not throw error if user config exists', async t => {\n  moduleRewireAPI.__Rewire__('config', { userConfigExists: true });\n\n  await t.notThrows(validateUserConfig);\n\n  moduleRewireAPI.__ResetDependency__('config');\n});\n\ntest('should throw error if user config not exists', async t => {\n  moduleRewireAPI.__Rewire__('config', { userConfigExists: false });\n\n  await t.throws(validateUserConfig);\n\n  moduleRewireAPI.__ResetDependency__('config');\n});\n\ntest('should exit with success code', async t => {\n  sinon.stub(process, 'exit');\n  sinon.stub(console, 'error');\n\n  exit();\n\n  t.true(process.exit.calledWith(ExitCodes.Success));\n  t.false(console.error.called);\n\n  process.exit.restore();\n  console.error.restore();\n});\n\ntest('should exit with error code when passing error', async t => {\n  sinon.stub(process, 'exit');\n  sinon.stub(console, 'error');\n\n  const error = new Error('some error');\n\n  exit(error);\n\n  t.true(process.exit.calledWith(ExitCodes.Error));\n  t.true(console.error.calledWith(error));\n\n  process.exit.restore();\n  console.error.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/helpers.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/lib/utils/index.js",
    "content": "export { default as Seeder } from './seeder';\nexport { default as BaseLogger } from './base-logger';\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/lib/utils/seeder.js",
    "content": "/**\n * Base class for seeders to extend.\n *\n * Seeder is an Abstract base class\n * in order to use Seeder you need to\n * extend Seeder into your own class and implement async run() method\n *\n * @example\n * import { Seeder } from 'mongoose-data-seed';\n * import { User } from '../server/models';\n *\n * const data = [\n *   {\n *     email: 'user1@gmail.com',\n *     password: '123123',\n *     passwordConfirmation: '123123',\n *     isAdmin: true,\n *   },\n *   {\n *     email: 'user2@gmail.com',\n *     password: '123123',\n *     passwordConfirmation: '123123',\n *     isAdmin: false,\n *   },\n * ];\n *\n * class UsersSeeder extends Seeder {\n *   async shouldRun() {\n *     const count = await User.countDocuments().exec();\n *\n *     return count === 0;\n *   }\n *\n *   async run() {\n *     return User.create(data);\n *   }\n * }\n *\n * export default UsersSeeder;\n */\nclass Seeder {\n  /**\n   * Abstract class can not be constructed.\n   * Seeder class should be extended.\n   * @abstract\n   * @throws {TypeError} when creating an instance of the abstract class.\n   * @throws {TypeError} when the run method is not implemented.\n   */\n  constructor() {\n    if (this.constructor === Seeder) {\n      throw new TypeError('Can not construct abstract class.');\n    }\n    if (this.run === Seeder.prototype.run) {\n      throw new TypeError('Please implement abstract method run.');\n    }\n  }\n\n  /**\n   * Seed the data.\n   * @return {Promise} Stats about the save.\n   */\n  async seed() {\n    await this.beforeRun();\n\n    let results = null;\n\n    if (await this.shouldRun()) {\n      results = await this.run();\n    }\n\n    return this.getStats(results);\n  }\n\n  /**\n   * Should run\n   * @return {Promise<boolean>} Indication if should run\n   * @abstract\n   */\n  async shouldRun() {\n    return true;\n  }\n\n  /**\n   * To perform before run.\n   * @return {Promise}\n   * @abstract\n   */\n  async beforeRun() {}\n\n  /**\n   * Run the seeder.\n   * @abstract\n   */\n  async run() {\n    throw new TypeError(\n      `Need to implement ${this.constructor.name} async run() function`\n    );\n  }\n\n  /**\n   * Get stats from seed results.\n   * @param  {Array} [results] Seed results.\n   * @return {Object}\n   * @property {boolean} run      Did the seeder run?\n   * @property {number}  created  Amount of records created by the seeder.\n   */\n  getStats(results) {\n    if (Array.isArray(results)) {\n      return { run: true, created: results.length };\n    }\n\n    return { run: false, created: 0 };\n  }\n\n  /**\n   * Creates a new seeder by extending the base seeder.\n   * Useful when not using old javascript\n   * @param  {Object} [userSeederMethods={}]  Object with the seeders method\n   *                                          (e.g. run, shouldRun, beforeRun ...)\n   * @return {Seeder}\n   *\n   * @example\n   * Seeder.extends({\n   *   shouldRun: function() {\n   *     return User.countDocuments()\n   *       .exec()\n   *       .then(function(count) {\n   *         return count === 0;\n   *       });\n   *   },\n   *   run: function() {\n   *     return User.create(data);\n   *   }\n   * });\n   */\n  static extend(userSeederMethods = {}) {\n    class UserSeeder extends Seeder {}\n\n    // Add methods to the user seeder\n    Object.keys(userSeederMethods).forEach(key => {\n      UserSeeder.prototype[key] = userSeederMethods[key];\n    });\n\n    return UserSeeder;\n  }\n}\n\nexport default Seeder;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/seeder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "Seeder",
    "memberof": "src/lib/utils/seeder.js",
    "static": true,
    "longname": "src/lib/utils/seeder.js~Seeder",
    "access": "public",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/seeder.js",
    "importStyle": "Seeder",
    "description": "Base class for seeders to extend.\n\nSeeder is an Abstract base class\nin order to use Seeder you need to\nextend Seeder into your own class and implement async run() method",
    "examples": [
      "import { Seeder } from 'mongoose-data-seed';\nimport { User } from '../server/models';\n\nconst data = [\n  {\n    email: 'user1@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: true,\n  },\n  {\n    email: 'user2@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: false,\n  },\n];\n\nclass UsersSeeder extends Seeder {\n  async shouldRun() {\n    const count = await User.countDocuments().exec();\n\n    return count === 0;\n  }\n\n  async run() {\n    return User.create(data);\n  }\n}\n\nexport default UsersSeeder;"
    ],
    "lineNumber": 41,
    "interface": false
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#constructor",
    "access": "public",
    "description": "Abstract class can not be constructed.\nSeeder class should be extended.",
    "lineNumber": 49,
    "abstract": true,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "when creating an instance of the abstract class."
      },
      {
        "types": [
          "TypeError"
        ],
        "description": "when the run method is not implemented."
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "seed",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#seed",
    "access": "public",
    "description": "Seed the data.",
    "lineNumber": 62,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Stats about the save."
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "shouldRun",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#shouldRun",
    "access": "public",
    "description": "Should run",
    "lineNumber": 79,
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "Indication if should run"
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "beforeRun",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#beforeRun",
    "access": "public",
    "description": "To perform before run.",
    "lineNumber": 88,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "run",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#run",
    "access": "public",
    "description": "Run the seeder.",
    "lineNumber": 94,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/utils/seeder.js~Seeder#getStats",
    "access": "public",
    "description": "Get stats from seed results.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "results",
        "description": "Seed results."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Did the seeder run?"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "created",
        "description": "Amount of records created by the seeder."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "extend",
    "memberof": "src/lib/utils/seeder.js~Seeder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/seeder.js~Seeder.extend",
    "access": "public",
    "description": "Creates a new seeder by extending the base seeder.\nUseful when not using old javascript",
    "examples": [
      "Seeder.extends({\n  shouldRun: function() {\n    return User.countDocuments()\n      .exec()\n      .then(function(count) {\n        return count === 0;\n      });\n  },\n  run: function() {\n    return User.create(data);\n  }\n});"
    ],
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "userSeederMethods",
        "description": "Object with the seeders method\n                                         (e.g. run, shouldRun, beforeRun ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Seeder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/lib/utils/seeder.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport Seeder from './seeder';\n\ntest('should throw error when trying to create new instance of Seeder', t => {\n  t.throws(() => new Seeder(), TypeError);\n});\n\ntest('should throw error if not implementing run method', t => {\n  class MySeeder extends Seeder {}\n\n  t.throws(() => new MySeeder(), TypeError);\n});\n\ntest('should throw error when running the base run method', async t => {\n  await t.throwsAsync(() => Seeder.prototype.run(), TypeError);\n});\n\ntest('async shouldRun method need to return true', async t => {\n  t.true(await Seeder.prototype.shouldRun());\n});\n\ntest('async beforeRun need to return promise', async t => {\n  await Seeder.prototype.beforeRun();\n  t.pass();\n});\n\ntest('getStats should return empty stats when not providing results args', t => {\n  const acctual = Seeder.prototype.getStats();\n  const excepted = { run: false, created: 0 };\n\n  t.deepEqual(acctual, excepted);\n});\n\ntest('getStats should return stats when providing results args', t => {\n  const fakedResults = ['', '', '', '', '', ''];\n  const acctual = Seeder.prototype.getStats(fakedResults);\n  const excepted = { run: true, created: fakedResults.length };\n\n  t.deepEqual(acctual, excepted);\n});\n\ntest('static extend method should create a new class based on the Seeder class with the given methods', async t => {\n  const MySeeder = Seeder.extend({\n    run: sinon.stub().returns(Promise.resolve('run work')),\n  });\n\n  const baseClassName = Object.getPrototypeOf(MySeeder.prototype.constructor)\n    .name;\n\n  t.is(baseClassName, 'Seeder');\n  t.is(await MySeeder.prototype.run(), 'run work');\n});\n\ntest('static extend method should create a new class based on the Seeder class without methods', async t => {\n  const MySeeder = Seeder.extend();\n\n  MySeeder.prototype.run = sinon.stub().returns(Promise.resolve('run work'));\n\n  const baseClassName = Object.getPrototypeOf(MySeeder.prototype.constructor)\n    .name;\n\n  t.is(baseClassName, 'Seeder');\n  t.is(await MySeeder.prototype.run(), 'run work');\n});\n\ntest('seed method should run seeder if shouldRun returns true', async t => {\n  const fakedResults = ['', '', '', '', '', ''];\n\n  const shouldRun = sinon.stub().returns(Promise.resolve(true));\n  const beforeRun = sinon.stub().returns(Promise.resolve());\n  const run = sinon.stub().returns(Promise.resolve(fakedResults));\n\n  const MySeeder = Seeder.extend({ shouldRun, beforeRun, run });\n\n  const mySeeder = new MySeeder();\n\n  sinon.spy(mySeeder, 'getStats');\n\n  const acctualResults = await mySeeder.seed();\n  const exceptedResults = { run: true, created: fakedResults.length };\n\n  t.true(beforeRun.calledBefore(shouldRun));\n  t.true(shouldRun.calledBefore(run));\n  t.true(run.called);\n  t.true(mySeeder.getStats.calledWith(fakedResults));\n  t.deepEqual(acctualResults, exceptedResults);\n});\n\ntest('seed method should not run seeder if shouldRun returns false', async t => {\n  const fakedResults = ['', '', '', '', '', ''];\n\n  const shouldRun = sinon.stub().returns(Promise.resolve(false));\n  const beforeRun = sinon.stub().returns(Promise.resolve());\n  const run = sinon.stub().returns(Promise.resolve(fakedResults));\n\n  const MySeeder = Seeder.extend({ shouldRun, beforeRun, run });\n\n  const mySeeder = new MySeeder();\n\n  sinon.spy(mySeeder, 'getStats');\n\n  const acctualResults = await mySeeder.seed();\n  const exceptedResults = { run: false, created: 0 };\n\n  t.true(beforeRun.calledBefore(shouldRun));\n  t.true(shouldRun.called);\n  t.true(run.notCalled);\n  t.true(mySeeder.getStats.calledAfter(shouldRun));\n  t.deepEqual(acctualResults, exceptedResults);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/seeder.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/lib/utils/test-helpers.js",
    "content": "/**\n * Mock imports in test\n * @private\n */\nexport const mockImports = ({ moduleRewireAPI, mocks }) => {\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n};\n/**\n * Reset imports in test\n * @private\n */\nexport const resetImports = ({ moduleRewireAPI, imports }) => {\n  for (const name of imports) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/test-helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "mockImports",
    "memberof": "src/lib/utils/test-helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/test-helpers.js~mockImports",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/test-helpers.js",
    "importStyle": "{mockImports}",
    "description": "Mock imports in test",
    "lineNumber": 5,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"moduleRewireAPI\": *, \"mocks\": *}"
        ],
        "defaultRaw": {
          "moduleRewireAPI": null,
          "mocks": null
        },
        "defaultValue": "{\"moduleRewireAPI\":null,\"mocks\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "resetImports",
    "memberof": "src/lib/utils/test-helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/utils/test-helpers.js~resetImports",
    "access": "private",
    "export": true,
    "importPath": "mongoose-data-seed/src/lib/utils/test-helpers.js",
    "importStyle": "{resetImports}",
    "description": "Reset imports in test",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"moduleRewireAPI\": *, \"imports\": *}"
        ],
        "defaultRaw": {
          "moduleRewireAPI": null,
          "imports": null
        },
        "defaultValue": "{\"moduleRewireAPI\":null,\"imports\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "src/setup-test-env.js",
    "content": "require('@babel/register')({\n  extends: './.babelrc',\n  ignore: [/node_modules/],\n});\n\nrequire('core-js/stable');\nrequire('regenerator-runtime/runtime');\n\nconst chalk = require('chalk');\n\nchalk.enabled = false;\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/setup-test-env.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "chalk",
    "memberof": "src/setup-test-env.js",
    "static": true,
    "longname": "src/setup-test-env.js~chalk",
    "access": "public",
    "export": false,
    "importPath": "mongoose-data-seed/src/setup-test-env.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "[![Package Version](https://img.shields.io/npm/v/mongoose-data-seed.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-data-seed)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Downloads Status](https://img.shields.io/npm/dm/mongoose-data-seed.svg?style=flat-square)](https://npm-stat.com/charts.html?package=mongoose-data-seed&from=2016-04-01)\n[![Build Status: Linux](https://img.shields.io/travis/sharvit/mongoose-data-seed/master.svg?style=flat-square)](https://travis-ci.org/sharvit/mongoose-data-seed)\n[![Coverage Status](https://coveralls.io/repos/github/sharvit/mongoose-data-seed/badge.svg?branch=master)](https://coveralls.io/github/sharvit/mongoose-data-seed?branch=master)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![dependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/status.svg)](https://david-dm.org/sharvit/mongoose-data-seed)\n[![devDependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/dev-status.svg)](https://david-dm.org/sharvit/mongoose-data-seed?type=dev)\n[![Greenkeeper badge](https://badges.greenkeeper.io/sharvit/mongoose-data-seed.svg)](https://greenkeeper.io/)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n# mongoose-data-seed\n\nSeed mongodb with data using mongoose models\n\n![cli example using md-seed run](https://raw.githubusercontent.com/sharvit/mongoose-data-seed/master/md-seed-run-example.gif)\n\n## Install\n\n```shell\nnpm install --save mongoose-data-seed\nmd-seed init\n```\n\n`md-seed init` will ask you to choose a folder for your seeders.\n\n`md-seed init` will create the `seeders` folder, generate `md-seed-config.js` and update your `package.json`.\n\n## Use\n\nGenerate seeder file\n\n```shell\nmd-seed g users\n```\n\nRun all seeders\n\n```shell\nmd-seed run\n```\n\nOr run specific seeders\n\n```shell\nmd-seed run users posts comments\n```\n\n## Options\n\nDrop the database before seeding\n\n```shell\nmd-seed run --dropdb\n```\n\n## Seeder Example\n\n```javascript\nimport { Seeder } from 'mongoose-data-seed';\nimport { User } from '../server/models';\n\nconst data = [\n  {\n    email: 'user1@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: true\n  },\n  {\n    email: 'user2@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: false\n  }\n];\n\nclass UsersSeeder extends Seeder {\n  async shouldRun() {\n    return User.countDocuments()\n      .exec()\n      .then(count => count === 0);\n  }\n\n  async run() {\n    return User.create(data);\n  }\n}\n\nexport default UsersSeeder;\n\n```\n\n### md-seed-config.js\n\n`md-seed` expecting to get 3 values from `md-seed-config.js`\n\n1. `seedersList` - A key/value list of all your seeders,\n   `md-seed` will run your seeders as they ordered in the list.\n1. `connect` - Connect to mongodb implementation (should return promise).\n2. `dropdb` - Drop/Clear the database implementation (should return promise).\n\n#### Example\n\n```javascript\nimport mongoose from 'mongoose';\n\nimport Users from './seeders/users.seeder';\nimport Posts from './seeders/posts.seeder';\nimport Comments from './seeders/comments.seeder';\n\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost:27017/dbname';\n\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\nexport const seedersList = {\n  Users,\n  Posts,\n  Comments,\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\nexport const connect = async () => await mongoose.connect(mongoURL, { useNewUrlParser: true });\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\nexport const dropdb = async () => mongoose.connection.db.dropDatabase();\n\n```\n\n### Configurations\n\n`mongoose-data-seed` configurations will get loaded from the `mdSeed` field in your `package.json` file.\n\nField                  | Default Value | Description\n-----------------------|---------------|--------------------------------------------------------------------------\n`seedersFolder`        | `'./seeders'` | Path for your seeders-folder, seeders will be generated into this folder.\n`customSeederTemplate` | `undefined`   | Path to a custom template file to generate your seeders from.\n\n\n## Examples\n\n1. [md-seed-example](https://github.com/sharvit/mongoose-data-seed/tree/master/examples/md-seed-example)\n\n## License\n\nMIT\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"mongoose-data-seed\",\n  \"version\": \"2.1.6\",\n  \"description\": \"Seed mongodb with data using mongoose models\",\n  \"license\": \"MIT\",\n  \"repository\": \"https://github.com/sharvit/mongoose-data-seed\",\n  \"homepage\": \"https://sharvit.github.io/mongoose-data-seed\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sharvit/mongoose-data-seed/issues\"\n  },\n  \"author\": {\n    \"name\": \"Avi Sharvit\",\n    \"email\": \"sharvita@gmail.com\",\n    \"url\": \"https://sharvit.github.io\"\n  },\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"md-seed\": \"./md-seed.js\"\n  },\n  \"scripts\": {\n    \"prebuild\": \"yarn build:clean\",\n    \"build\": \"yarn build:dist && yarn build:docs\",\n    \"build:clean\": \"rimraf dist\",\n    \"build:dist\": \"babel src/ --out-dir dist/ --ignore 'src/**/*.test.js','src/e2e/*','src/**/__mocks__/*','src/lib/utils/test-helpers.js','src/setup-test-env.js'\",\n    \"build:docs\": \"esdoc -c .esdoc.json\",\n    \"develop:docs\": \"watch \\\"yarn build:docs\\\" . --ignoreDirectoryPattern='/node_modules|docs|sandboxes|dist|coverage|.git|.nyc*./'\",\n    \"test\": \"cross-env NODE_ENV=test nyc --no-cache ava\",\n    \"test:watch\": \"yarn test --watch\",\n    \"test:check-coverage\": \"nyc check-coverage --statements 100 --branches 100 --functions 100 --lines 100\",\n    \"coveralls\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"lint\": \"eslint --max-warnings 0 .\",\n    \"lint:commit\": \"commitlint -e\",\n    \"lint:commit-travis\": \"commitlint-travis\",\n    \"commit\": \"git-cz\",\n    \"semantic-release\": \"semantic-release\",\n    \"slate\": \"rimraf node_modules && yarn\",\n    \"prepare\": \"yarn build\"\n  },\n  \"ava\": {\n    \"concurrency\": 5,\n    \"verbose\": true,\n    \"failFast\": false,\n    \"files\": [\n      \"src/e2e/*.e2e.js\",\n      \"src/lib/**/*.test.js\"\n    ],\n    \"sources\": [\n      \"src/**/*.js\"\n    ],\n    \"require\": [\n      \"./src/setup-test-env.js\"\n    ]\n  },\n  \"nyc\": {\n    \"sourceMap\": false,\n    \"instrument\": false,\n    \"include\": [\n      \"src/**/*.js\"\n    ],\n    \"exclude\": [\n      \"**/*.test.js\",\n      \"**/__mocks__/**/*\",\n      \"src/e2e/**/*\",\n      \"src/lib/config.js\",\n      \"src/lib/utils/test-helpers.js\"\n    ],\n    \"reporter\": [\n      \"lcov\",\n      \"text\",\n      \"html\"\n    ]\n  },\n  \"dependencies\": {\n    \"@babel/core\": \"^7.5.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.5.0\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.5.0\",\n    \"@babel/preset-env\": \"^7.5.0\",\n    \"@babel/register\": \"^7.5.0\",\n    \"@babel/runtime\": \"^7.5.0\",\n    \"chalk\": \"^2.0.0\",\n    \"clui\": \"^0.3.1\",\n    \"command-line-args\": \"^5.0.2\",\n    \"command-line-commands\": \"^3.0.1\",\n    \"command-line-usage\": \"^6.0.2\",\n    \"core-js\": \"^3.1.4\",\n    \"find-root\": \"^1.0.0\",\n    \"inquirer\": \"^7.0.0\",\n    \"lodash\": \"^4.17.11\",\n    \"log-symbols\": \"^3.0.0\",\n    \"mem-fs\": \"^1.1.3\",\n    \"mem-fs-editor\": \"^6.0.0\",\n    \"regenerator-runtime\": \"^0.13.2\",\n    \"rxjs\": \"^6.3.3\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.5.0\",\n    \"@babel/core\": \"^7.5.0\",\n    \"@babel/preset-env\": \"^7.5.0\",\n    \"@commitlint/cli\": \"^8.1.0\",\n    \"@commitlint/config-conventional\": \"^8.1.0\",\n    \"@commitlint/travis-cli\": \"^8.1.0\",\n    \"ava\": \"^2.0.0\",\n    \"babel-eslint\": \"^10.0.3\",\n    \"babel-plugin-add-module-exports\": \"^1.0.0\",\n    \"babel-plugin-istanbul\": \"^5.1.0\",\n    \"babel-plugin-rewire\": \"^1.2.0\",\n    \"commitlint-config-cz\": \"^0.12.0\",\n    \"coveralls\": \"^3.0.2\",\n    \"cross-env\": \"^6.0.0\",\n    \"cz-conventional-changelog\": \"^3.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.5.1\",\n    \"eslint-config-prettier\": \"^6.0.0\",\n    \"eslint-config-standard\": \"^14.0.1\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-node\": \"^10.0.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"mongoose\": \"^5.3.11\",\n    \"ncp\": \"^2.0.0\",\n    \"nyc\": \"^14.0.0\",\n    \"prettier\": \"^1.15.3\",\n    \"prettier-eslint\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"semantic-release\": \"^15.13.1\",\n    \"sinon\": \"^7.1.1\",\n    \"watch\": \"^1.0.2\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"keywords\": [\n    \"mongoose\",\n    \"seed\",\n    \"data\",\n    \"mongodb\",\n    \"seeder\",\n    \"mongoosejs\"\n  ]\n}\n",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "[![Package Version](https://img.shields.io/npm/v/mongoose-data-seed.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-data-seed)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Downloads Status](https://img.shields.io/npm/dm/mongoose-data-seed.svg?style=flat-square)](https://npm-stat.com/charts.html?package=mongoose-data-seed&from=2016-04-01)\n[![Build Status: Linux](https://img.shields.io/travis/sharvit/mongoose-data-seed/master.svg?style=flat-square)](https://travis-ci.org/sharvit/mongoose-data-seed)\n[![Coverage Status](https://coveralls.io/repos/github/sharvit/mongoose-data-seed/badge.svg?branch=master)](https://coveralls.io/github/sharvit/mongoose-data-seed?branch=master)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![dependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/status.svg)](https://david-dm.org/sharvit/mongoose-data-seed)\n[![devDependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/dev-status.svg)](https://david-dm.org/sharvit/mongoose-data-seed?type=dev)\n[![Greenkeeper badge](https://badges.greenkeeper.io/sharvit/mongoose-data-seed.svg)](https://greenkeeper.io/)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n# mongoose-data-seed\n\nSeed mongodb with data using mongoose models\n\n![cli example using md-seed run](https://raw.githubusercontent.com/sharvit/mongoose-data-seed/master/md-seed-run-example.gif)\n\n## Install\n\n```shell\nnpm install --save mongoose-data-seed\nmd-seed init\n```\n\n`md-seed init` will ask you to choose a folder for your seeders.\n\n`md-seed init` will create the `seeders` folder, generate `md-seed-config.js` and update your `package.json`.\n\n## Use\n\nGenerate seeder file\n\n```shell\nmd-seed g users\n```\n\nRun all seeders\n\n```shell\nmd-seed run\n```\n\nOr run specific seeders\n\n```shell\nmd-seed run users posts comments\n```\n\n## Options\n\nDrop the database before seeding\n\n```shell\nmd-seed run --dropdb\n```\n\n## Seeder Example\n\n```javascript\nimport { Seeder } from 'mongoose-data-seed';\nimport { User } from '../server/models';\n\nconst data = [\n  {\n    email: 'user1@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: true\n  },\n  {\n    email: 'user2@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: false\n  }\n];\n\nclass UsersSeeder extends Seeder {\n  async shouldRun() {\n    return User.countDocuments()\n      .exec()\n      .then(count => count === 0);\n  }\n\n  async run() {\n    return User.create(data);\n  }\n}\n\nexport default UsersSeeder;\n\n```\n\n### md-seed-config.js\n\n`md-seed` expecting to get 3 values from `md-seed-config.js`\n\n1. `seedersList` - A key/value list of all your seeders,\n   `md-seed` will run your seeders as they ordered in the list.\n1. `connect` - Connect to mongodb implementation (should return promise).\n2. `dropdb` - Drop/Clear the database implementation (should return promise).\n\n#### Example\n\n```javascript\nimport mongoose from 'mongoose';\n\nimport Users from './seeders/users.seeder';\nimport Posts from './seeders/posts.seeder';\nimport Comments from './seeders/comments.seeder';\n\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost:27017/dbname';\n\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\nexport const seedersList = {\n  Users,\n  Posts,\n  Comments,\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\nexport const connect = async () => await mongoose.connect(mongoURL, { useNewUrlParser: true });\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\nexport const dropdb = async () => mongoose.connection.db.dropDatabase();\n\n```\n\n### Configurations\n\n`mongoose-data-seed` configurations will get loaded from the `mdSeed` field in your `package.json` file.\n\nField                  | Default Value | Description\n-----------------------|---------------|--------------------------------------------------------------------------\n`seedersFolder`        | `'./seeders'` | Path for your seeders-folder, seeders will be generated into this folder.\n`customSeederTemplate` | `undefined`   | Path to a custom template file to generate your seeders from.\n\n\n## Examples\n\n1. [md-seed-example](https://github.com/sharvit/mongoose-data-seed/tree/master/examples/md-seed-example)\n\n## License\n\nMIT\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/README.md",
    "name": "./README.md",
    "content": "[![Package Version](https://img.shields.io/npm/v/mongoose-data-seed.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-data-seed)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Downloads Status](https://img.shields.io/npm/dm/mongoose-data-seed.svg?style=flat-square)](https://npm-stat.com/charts.html?package=mongoose-data-seed&from=2016-04-01)\n[![Build Status: Linux](https://img.shields.io/travis/sharvit/mongoose-data-seed/master.svg?style=flat-square)](https://travis-ci.org/sharvit/mongoose-data-seed)\n[![Coverage Status](https://coveralls.io/repos/github/sharvit/mongoose-data-seed/badge.svg?branch=master)](https://coveralls.io/github/sharvit/mongoose-data-seed?branch=master)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![dependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/status.svg)](https://david-dm.org/sharvit/mongoose-data-seed)\n[![devDependencies Status](https://david-dm.org/sharvit/mongoose-data-seed/dev-status.svg)](https://david-dm.org/sharvit/mongoose-data-seed?type=dev)\n[![Greenkeeper badge](https://badges.greenkeeper.io/sharvit/mongoose-data-seed.svg)](https://greenkeeper.io/)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n# mongoose-data-seed\n\nSeed mongodb with data using mongoose models\n\n![cli example using md-seed run](https://raw.githubusercontent.com/sharvit/mongoose-data-seed/master/md-seed-run-example.gif)\n\n## Install\n\n```shell\nnpm install --save mongoose-data-seed\nmd-seed init\n```\n\n`md-seed init` will ask you to choose a folder for your seeders.\n\n`md-seed init` will create the `seeders` folder, generate `md-seed-config.js` and update your `package.json`.\n\n## Use\n\nGenerate seeder file\n\n```shell\nmd-seed g users\n```\n\nRun all seeders\n\n```shell\nmd-seed run\n```\n\nOr run specific seeders\n\n```shell\nmd-seed run users posts comments\n```\n\n## Options\n\nDrop the database before seeding\n\n```shell\nmd-seed run --dropdb\n```\n\n## Seeder Example\n\n```javascript\nimport { Seeder } from 'mongoose-data-seed';\nimport { User } from '../server/models';\n\nconst data = [\n  {\n    email: 'user1@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: true\n  },\n  {\n    email: 'user2@gmail.com',\n    password: '123123',\n    passwordConfirmation: '123123',\n    isAdmin: false\n  }\n];\n\nclass UsersSeeder extends Seeder {\n  async shouldRun() {\n    return User.countDocuments()\n      .exec()\n      .then(count => count === 0);\n  }\n\n  async run() {\n    return User.create(data);\n  }\n}\n\nexport default UsersSeeder;\n\n```\n\n### md-seed-config.js\n\n`md-seed` expecting to get 3 values from `md-seed-config.js`\n\n1. `seedersList` - A key/value list of all your seeders,\n   `md-seed` will run your seeders as they ordered in the list.\n1. `connect` - Connect to mongodb implementation (should return promise).\n2. `dropdb` - Drop/Clear the database implementation (should return promise).\n\n#### Example\n\n```javascript\nimport mongoose from 'mongoose';\n\nimport Users from './seeders/users.seeder';\nimport Posts from './seeders/posts.seeder';\nimport Comments from './seeders/comments.seeder';\n\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost:27017/dbname';\n\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\nexport const seedersList = {\n  Users,\n  Posts,\n  Comments,\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\nexport const connect = async () => await mongoose.connect(mongoURL, { useNewUrlParser: true });\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\nexport const dropdb = async () => mongoose.connection.db.dropDatabase();\n\n```\n\n### Configurations\n\n`mongoose-data-seed` configurations will get loaded from the `mdSeed` field in your `package.json` file.\n\nField                  | Default Value | Description\n-----------------------|---------------|--------------------------------------------------------------------------\n`seedersFolder`        | `'./seeders'` | Path for your seeders-folder, seeders will be generated into this folder.\n`customSeederTemplate` | `undefined`   | Path to a custom template file to generate your seeders from.\n\n\n## Examples\n\n1. [md-seed-example](https://github.com/sharvit/mongoose-data-seed/tree/master/examples/md-seed-example)\n\n## License\n\nMIT\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fsharvit%2Fmongoose-data-seed?ref=badge_shield)\n[![MIT License](https://img.shields.io/npm/l/stack-overflow-copy-paste.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/CONTRIBUTING.md",
    "name": "./CONTRIBUTING.md",
    "content": "# Contributing\n\nContributions are always welcome, no matter how large or small.\n\n**Working on your first Pull Request?** You can learn how from this _free_ series [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)\n\n## Code of Conduct\n\nBy participating, you are expected to uphold this [Contributor Covenant Code of Conduct](./CODE_OF_CONDUCT.md). Please report unacceptable behavior to [sharvita@gmail.com](mailto:sharvita@gmail.com).\n\n## Project setup\n\nFirst, [fork](https://guides.github.com/activities/forking) then clone the repo:\n\n```sh\ngit clone https://github.com/your-username/mongoose-data-seed\ncd mongoose-data-seed\ngit remote add upstream https://github.com/sharvit/mongoose-data-seed\n```\n\nInstall dependencies:\n\n```sh\nyarn\n```\n\nRun test suits to validate the project is working:\n\n```sh\nyarn test\n```\n\nRun linter to validate the project code:\n\n```sh\nyarn lint\n# to fix linting errors\nyarn lint --fix\n```\n\n\nRun linter to validate your commit message:\n\n```sh\nyarn lint:commit\n```\n\n## Committing and Pushing changes\n\nCreate a branch and start hacking:\n\n```sh\ngit checkout -b my-branch\n```\n\nCommit and push your changes:\n\n`generator-node-mdl` uses [commitizen](https://github.com/commitizen/cz-cli) to create commit messages so [semantic-release](https://github.com/semantic-release/semantic-release) can automatically create releases.\n\n```sh\ngit add .\n\nyarn commit\n# answer the questions\n\ngit push origin my-branch\n```\n\nOpen this project on [GitHub](https://github.com/sharvit/generator-node-mdl), then click “Compare & pull request”.\n\n## Help needed\n\nPlease watch the repo and respond to questions/bug reports/feature requests, Thanks!\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/CODE_OF_CONDUCT.md",
    "name": "./CODE_OF_CONDUCT.md",
    "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others‘ private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [sharvita@gmail.com](mailto:sharvita@gmail.com). All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project‘s leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 260,
    "kind": "testFile",
    "name": "src/lib/commands/generate/generate-seeder.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport generateSeeder, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './generate-seeder';\n\nconst helpData = {\n  name: 'name',\n  seederTemplate: 'template',\n  userSeedersFolderPath: 'path/to/seeders',\n};\n\ntest.beforeEach('mock imports', t => {\n  const { seederTemplate, userSeedersFolderPath } = helpData;\n\n  const mocks = {\n    validateUserConfig: sinon.stub(),\n    SeederGenerator: sinon.stub(),\n    config: { seederTemplate, userSeedersFolderPath },\n  };\n\n  mocks.SeederGenerator.prototype.generate = sinon\n    .stub()\n    .resolves('some.seeder.js');\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n\n  sinon.stub(console, 'log');\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n\n  console.log.restore();\n});\n\ntest('should generate a seeder', async t => {\n  const { validateUserConfig, SeederGenerator } = t.context.mocks;\n  await generateSeeder(helpData.name);\n\n  t.true(validateUserConfig.called);\n  t.true(SeederGenerator.calledWith(helpData));\n  t.true(SeederGenerator.prototype.generate.called);\n  t.true(console.log.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/generate-seeder.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "src/lib/commands/generate/generate-seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/generate/generate-seeder.test.js~test0",
    "access": null,
    "description": "should generate a seeder",
    "lineNumber": 44
  },
  {
    "__docId__": 262,
    "kind": "testFile",
    "name": "src/lib/commands/generate/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/help.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "src/lib/commands/generate/help.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/generate/help.test.js~test1",
    "access": null,
    "description": "show show help",
    "lineNumber": 6
  },
  {
    "__docId__": 264,
    "kind": "testFile",
    "name": "src/lib/commands/generate/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport generate, { __RewireAPI__ as moduleRewireAPI } from './index';\n\nconst helpData = { argv: 'some argv', seederName: 'some-seeder-name' };\n\ntest.beforeEach('create stubs', t => {\n  const stubs = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    generateSeeder: sinon.stub(),\n  };\n\n  Object.keys(stubs).forEach(methodName =>\n    moduleRewireAPI.__Rewire__(methodName, stubs[methodName])\n  );\n\n  t.context = { stubs };\n});\n\ntest.afterEach.always('restore stubs', t => {\n  const { stubs } = t.context;\n\n  Object.keys(stubs).forEach(methodName =>\n    moduleRewireAPI.__ResetDependency__(methodName)\n  );\n});\n\ntest.serial('should show help when asking for help', async t => {\n  const { argv } = helpData;\n  const { getOptions, help, generateSeeder } = t.context.stubs;\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await generate(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(generateSeeder.called);\n});\n\ntest.serial('should generate seeder when asking with seeder-name', async t => {\n  const { argv, seederName } = helpData;\n  const { getOptions, help, generateSeeder } = t.context.stubs;\n\n  getOptions.withArgs(argv).returns({ seederName });\n\n  await generate(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(generateSeeder.calledWith(seederName));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/index.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "testFile",
    "name": "src/lib/commands/generate/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  getOptions,\n  validateOptions,\n  __RewireAPI__ as moduleRewireAPI,\n} from './options';\n\nconst helpData = {\n  argv: 'some argv',\n  seederName: 'some-seeder-name',\n  optionDefinitions: 'some option definitions',\n};\n\ntest('should get user options from the cli', t => {\n  const createStubs = ({ commandLineArgs, optionDefinitions }) => {\n    moduleRewireAPI.__Rewire__('commandLineArgs', commandLineArgs);\n    moduleRewireAPI.__Rewire__('optionDefinitions', optionDefinitions);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('commandLineArgs');\n    moduleRewireAPI.__ResetDependency__('optionDefinitions');\n  };\n\n  const { argv, optionDefinitions, seederName } = helpData;\n\n  const commandLineArgs = sinon\n    .stub()\n    .withArgs(optionDefinitions, { argv })\n    .returns({ name: seederName, help: false });\n\n  createStubs({ commandLineArgs, optionDefinitions });\n\n  const expectedOptions = { seederName, helpWanted: false };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n\n  restoreStubs();\n});\n\ntest('should validate given options', t => {\n  const createStubs = ({ help }) => {\n    moduleRewireAPI.__Rewire__('help', help);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('help');\n    console.log.restore();\n  };\n\n  const help = sinon.stub();\n\n  createStubs({ help });\n\n  t.throws(() => validateOptions());\n  t.true(help.called);\n  t.true(console.log.called);\n  t.throws(() => validateOptions({ helpWanted: false }));\n  t.throws(() => validateOptions({ seederName: 'ab' }));\n  t.notThrows(() => validateOptions({ seederName: 'abc' }));\n  t.notThrows(() => validateOptions({ seederName: 'ab', helpWanted: true }));\n  t.notThrows(() => validateOptions({ helpWanted: true }));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/generate/options.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "src/lib/commands/generate/options.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/generate/options.test.js~test2",
    "access": null,
    "description": "should get user options from the cli",
    "lineNumber": 16
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "src/lib/commands/generate/options.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/generate/options.test.js~test3",
    "access": null,
    "description": "should validate given options",
    "lineNumber": 44
  },
  {
    "__docId__": 268,
    "kind": "testFile",
    "name": "src/lib/commands/help/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport usageGuide from './usage-guide';\nimport help from './index';\n\ntest('help command should print the usage guide', async t => {\n  sinon.stub(console, 'log');\n\n  await help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  console.log.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/help/help.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "src/lib/commands/help/help.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/help/help.test.js~test4",
    "access": null,
    "description": "help command should print the usage guide",
    "lineNumber": 7
  },
  {
    "__docId__": 270,
    "kind": "testFile",
    "name": "src/lib/commands/helpers.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { aliases, commands, commandsMap, defaultCommand } from './constants';\nimport {\n  isAlias,\n  aliasToCommand,\n  commandToFunction,\n  runCommand,\n  getCommandAndArgvFromCli,\n  __RewireAPI__ as moduleRewireAPI,\n} from './helpers';\n\ntest.serial('isAlias should work', t => {\n  Object.keys(aliases).forEach(a => t.is(isAlias(a), true));\n  Object.keys(commands).forEach(c => t.is(isAlias(c), false));\n\n  t.is(isAlias(), false);\n});\n\ntest.serial('aliasToCommand should work', t => {\n  for (const [alias, command] of Object.entries(aliases)) {\n    t.is(aliasToCommand(alias), command);\n  }\n});\n\ntest.serial('commandToFunction should work', t => {\n  for (const [command, func] of Object.entries(commandsMap)) {\n    t.is(commandToFunction(command), func);\n  }\n\n  for (const [alias, command] of Object.entries(aliases)) {\n    t.is(commandToFunction(alias), commandToFunction(command));\n  }\n\n  t.is(commandToFunction(), commandToFunction(defaultCommand));\n});\n\ntest.serial('should get command and argv from cli', t => {\n  const shouldReturn = { command: 'command', argv: 'argv' };\n  const stub = sinon.stub().returns(shouldReturn);\n\n  moduleRewireAPI.__Rewire__('commandLineCommands', stub);\n\n  const result = getCommandAndArgvFromCli();\n\n  t.true(stub.called);\n  t.deepEqual(result, shouldReturn);\n\n  moduleRewireAPI.__ResetDependency__('commandLineCommands');\n});\n\ntest.serial('runCommand should work', t => {\n  const spy = sinon.spy();\n  const stub = sinon\n    .stub()\n    .withArgs('help')\n    .returns(spy);\n\n  moduleRewireAPI.__Rewire__('commandToFunction', stub);\n\n  runCommand('help', 'some args...');\n\n  t.true(stub.calledWith('help'));\n  t.true(spy.calledWith('some args...'));\n\n  moduleRewireAPI.__ResetDependency__('commandToFunction');\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/helpers.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "testFile",
    "name": "src/lib/commands/init/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/help.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "src/lib/commands/init/help.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/init/help.test.js~test5",
    "access": null,
    "description": "show show help",
    "lineNumber": 6
  },
  {
    "__docId__": 273,
    "kind": "testFile",
    "name": "src/lib/commands/init/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport init, { __RewireAPI__ as moduleRewireAPI } from './index';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    runInstaller: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should show help', async t => {\n  const { getOptions, help, runInstaller } = t.context.mocks;\n\n  const argv = 'some-argv';\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await init(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(runInstaller.called);\n});\n\ntest.serial('should run installer', async t => {\n  const { getOptions, help, runInstaller } = t.context.mocks;\n\n  const argv = 'some-argv';\n  const options = { some: 'options' };\n\n  getOptions.withArgs(argv).returns(options);\n\n  await init(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(runInstaller.calledWith(options));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/index.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "testFile",
    "name": "src/lib/commands/init/installer-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport InstallerLogger from './installer-logger';\n\nconst createMockedLogger = () => {\n  return new InstallerLogger();\n};\n\ntest.beforeEach('mock', t => {\n  sinon.stub(global.console, 'error');\n  sinon.stub(global.console, 'log');\n});\n\ntest.afterEach.always('unmock', t => {\n  global.console.error.restore();\n  global.console.log.restore();\n});\n\ntest.serial('Should create a installer-logger instance', t => {\n  const logger = new InstallerLogger();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest.serial('Should return observer', t => {\n  const logger = new InstallerLogger();\n\n  const observer = logger.asObserver();\n\n  t.is(typeof observer.next, 'function');\n  t.is(typeof observer.error, 'function');\n});\n\ntest.serial('Should log WRITE_USER_GENERETOR_CONFIG_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_GENERETOR_CONFIG_SUCCESS';\n  logger.next({ type });\n\n  t.true(global.console.log.calledWith(sinon.match(/UPDATED/)));\n  t.true(global.console.log.calledWith(sinon.match(/package.json/)));\n});\n\ntest.serial(\n  'Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n  t => {\n    const logger = createMockedLogger();\n\n    const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS';\n    const payload = { customSeederTemplateFilename: 'some-filename' };\n\n    logger.next({ type, payload });\n\n    t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n    t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n    t.true(\n      global.console.log.calledWith(\n        sinon.match(payload.customSeederTemplateFilename)\n      )\n    );\n  }\n);\n\ntest.serial('Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS';\n  const payload = { customSeederTemplateFilename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(payload.customSeederTemplateFilename)\n    )\n  );\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS';\n  const payload = { foldername: 'some-foldername' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n  t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.foldername)));\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_SUCCESS';\n  const payload = { foldername: 'some-foldername' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.foldername)));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_SKIP_FILE_EXISTS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS';\n  const payload = { filename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/SKIP/)));\n  t.true(global.console.log.calledWith(sinon.match(/are already exists/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.filename)));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_SUCCESS';\n  const payload = { filename: 'some-filename' };\n\n  logger.next({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/CREATED/)));\n  t.true(global.console.log.calledWith(sinon.match(payload.filename)));\n});\n\ntest.serial('Should log WRITE_USER_GENERETOR_CONFIG_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_GENERETOR_CONFIG_ERROR';\n  const payload = { error: 'some-error', filepath: 'some-filepath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(sinon.match(/Unable to write config file/))\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.filepath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR';\n  const payload = {\n    error: 'some-error',\n    customSeederTemplatePath: 'some-filename',\n  };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to create custom seeder template/)\n    )\n  );\n  t.true(\n    global.console.log.calledWith(sinon.match(payload.customSeederTemplatePath))\n  );\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log CREATE_SEEDERS_FOLDER_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'CREATE_SEEDERS_FOLDER_ERROR';\n  const payload = { error: 'some-error', folderpath: 'some-folderpath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to create seeders folder/)\n    )\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.folderpath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log WRITE_USER_CONFIG_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const type = 'WRITE_USER_CONFIG_ERROR';\n  const payload = { error: 'some-error', filepath: 'some-filepath' };\n\n  logger.error({ type, payload });\n\n  t.true(global.console.log.calledWith(sinon.match(/ERROR/)));\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Unable to write user config file/)\n    )\n  );\n  t.true(global.console.log.calledWith(sinon.match(payload.filepath)));\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log error', t => {\n  const logger = createMockedLogger();\n\n  const payload = { error: 'some-error' };\n\n  logger.error({ type: 'some-type', payload });\n\n  t.true(global.console.error.calledWith(payload.error));\n});\n\ntest.serial('Should log error without inner error', t => {\n  const logger = createMockedLogger();\n\n  const payload = {};\n\n  logger.error({ type: 'some-type', payload });\n\n  t.false(global.console.error.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/installer-logger.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "testFile",
    "name": "src/lib/commands/init/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  getOptions,\n  promptMissingOptions,\n  __RewireAPI__ as moduleRewireAPI,\n} from './options';\n\nconst helpData = {\n  argv: 'some argv',\n  seedersFolder: 'folder-name',\n  seederTemplate: 'file-path.js',\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    optionDefinitions: 'some option definitions',\n    commandLineArgs: sinon.stub(),\n    validateSeedersFolderName: sinon.stub(),\n    validateSeederTemplatePath: sinon.stub(),\n    promptSeedersFolder: sinon.stub(),\n    promptSeederTemplate: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest('should get user options from the cli', t => {\n  const { argv, seedersFolder, seederTemplate } = helpData;\n\n  const { commandLineArgs, optionDefinitions } = t.context.mocks;\n\n  commandLineArgs\n    .withArgs(optionDefinitions, { argv })\n    .returns({ seedersFolder, seederTemplate, help: false });\n\n  const expectedOptions = {\n    seedersFolder,\n    customSeederTemplate: seederTemplate,\n    helpWanted: false,\n  };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n});\n\ntest.serial(\n  'promptMissingOptions should not prompt when suplying valid options',\n  async t => {\n    const { seedersFolder, seederTemplate } = helpData;\n    const options = { seedersFolder, customSeederTemplate: seederTemplate };\n\n    const {\n      validateSeedersFolderName,\n      validateSeederTemplatePath,\n      promptSeedersFolder,\n      promptSeederTemplate,\n    } = t.context.mocks;\n\n    validateSeedersFolderName.withArgs(seedersFolder).returns(true);\n    validateSeederTemplatePath.withArgs(seederTemplate).returns(true);\n\n    const results = await promptMissingOptions(options);\n\n    t.deepEqual(results, options);\n    t.true(validateSeedersFolderName.calledWith(seedersFolder));\n    t.true(validateSeederTemplatePath.calledWith(seederTemplate));\n    t.false(promptSeedersFolder.called);\n    t.false(promptSeederTemplate.called);\n  }\n);\n\ntest.serial(\n  'promptMissingOptions should prompt all when not supplying options',\n  async t => {\n    const { seedersFolder, seederTemplate } = helpData;\n    const expectedResults = {\n      seedersFolder,\n      customSeederTemplate: seederTemplate,\n    };\n\n    const {\n      validateSeedersFolderName,\n      validateSeederTemplatePath,\n      promptSeedersFolder,\n      promptSeederTemplate,\n    } = t.context.mocks;\n\n    validateSeedersFolderName.returns(false);\n    validateSeederTemplatePath.returns(false);\n    promptSeedersFolder.returns(seedersFolder);\n    promptSeederTemplate.returns(seederTemplate);\n\n    const results = await promptMissingOptions();\n\n    t.deepEqual(results, expectedResults);\n    t.true(validateSeedersFolderName.called);\n    t.true(validateSeederTemplatePath.called);\n    t.true(promptSeedersFolder.called);\n    t.true(promptSeederTemplate.called);\n  }\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/options.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "src/lib/commands/init/options.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/init/options.test.js~test6",
    "access": null,
    "description": "should get user options from the cli",
    "lineNumber": 39
  },
  {
    "__docId__": 277,
    "kind": "testFile",
    "name": "src/lib/commands/init/prompts.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport {\n  promptSeedersFolder,\n  promptSeederTemplate,\n  __RewireAPI__ as moduleRewireAPI,\n} from './prompts';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    inquirer: { prompt: sinon.stub() },\n    validateSeedersFolderName: sinon.stub(),\n    validateSeederTemplatePath: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should prompt to enter seeders-folder-name', async t => {\n  const seedersFolderName = 'some-folder-name';\n  const { inquirer, validateSeedersFolderName } = t.context.mocks;\n\n  const fakedPrompt = async optionsArray => {\n    const promptResults = {};\n\n    for (const { name, validate, filter } of optionsArray) {\n      const value = filter(seedersFolderName);\n\n      if (!validate(value)) throw new Error(`${name} is invalid`);\n\n      promptResults[name] = value;\n    }\n\n    return promptResults;\n  };\n\n  inquirer.prompt.callsFake(fakedPrompt);\n  validateSeedersFolderName.withArgs(seedersFolderName).returns(true);\n\n  const result = await promptSeedersFolder();\n\n  t.is(result, seedersFolderName);\n  t.true(validateSeedersFolderName.calledWith(seedersFolderName));\n});\n\ntest.serial('should prompt to use custom template and decline', async t => {\n  const { inquirer } = t.context.mocks;\n\n  inquirer.prompt.callsFake(async () => ({\n    useCustomSeeder: false,\n  }));\n\n  const result = await promptSeederTemplate();\n\n  t.is(result, undefined);\n});\n\ntest.serial(\n  'should prompt to use custom template and accept with file path',\n  async t => {\n    const { inquirer, validateSeederTemplatePath } = t.context.mocks;\n    const seederTemplatePath = './some-file-name.js';\n\n    const fakedPrompt = async optionsArray => {\n      const { name, validate, filter } = optionsArray[0];\n\n      if (name === 'useCustomSeeder') return { useCustomSeeder: true };\n\n      if (name === 'seederTemplatePath') {\n        const value = filter(seederTemplatePath);\n        if (!validate(value)) throw new Error(`${name} is invalid`);\n\n        return { seederTemplatePath };\n      }\n    };\n\n    inquirer.prompt.callsFake(fakedPrompt);\n    validateSeederTemplatePath.withArgs(seederTemplatePath).returns(true);\n\n    const result = await promptSeederTemplate();\n\n    t.is(result, seederTemplatePath);\n  }\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/prompts.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "testFile",
    "name": "src/lib/commands/init/run-installer.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport Installer from '../../core/__mocks__/installer';\n\nimport runInstaller, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './run-installer';\n\nimport InstallerLogger from './__mocks__/installer-logger';\n\nconst testInstaller = async (t, options) => {\n  const { Installer, promptMissingOptions } = t.context.mocks;\n\n  const seedersFolder =\n    (options && options.seedersFolder) || 'some-seeder-folder';\n\n  const customSeederTemplate =\n    (options && options.customSeederTemplate) || 'some-file-path.js';\n\n  promptMissingOptions.resolves({ seedersFolder, customSeederTemplate });\n\n  await runInstaller(options);\n\n  t.true(promptMissingOptions.calledWith(options || {}));\n  t.true(Installer.calledWith({ seedersFolder, customSeederTemplate }));\n  t.true(Installer.prototype.install.called);\n  t.true(\n    Installer.stubbedOvservable.subscribe.calledWith(\n      InstallerLogger.stubbedOvserver\n    )\n  );\n  t.true(Installer.stubbedOvservable.toPromise.called);\n\n  t.true(InstallerLogger.called);\n  t.true(InstallerLogger.prototype.asObserver.called);\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    InstallerLogger,\n    Installer,\n    promptMissingOptions: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  for (const [name, mock] of Object.entries(mocks)) {\n    moduleRewireAPI.__Rewire__(name, mock);\n  }\n});\n\ntest.afterEach.always('unmock imports', t => {\n  for (const name of Object.keys(t.context.mocks)) {\n    moduleRewireAPI.__ResetDependency__(name);\n  }\n});\n\ntest.serial('should run installer', t => testInstaller(t));\n\ntest.serial('should run installer with options', t =>\n  testInstaller(t, {\n    seedersFolder: 'some-seeders-folder',\n    customSeederTemplate: 'some-file-path.js',\n  })\n);\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/init/run-installer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "testFile",
    "name": "src/lib/commands/run/help.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport help, { __RewireAPI__ as moduleRewireAPI } from './help';\n\ntest('show show help', t => {\n  const createStubs = ({ usageGuide }) => {\n    moduleRewireAPI.__Rewire__('usageGuide', usageGuide);\n    sinon.stub(console, 'log');\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('usageGuide');\n    console.log.restore();\n  };\n\n  const usageGuide = 'some usage guide';\n\n  createStubs({ usageGuide });\n\n  help();\n\n  t.true(console.log.calledWith(usageGuide));\n\n  restoreStubs();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/help.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "src/lib/commands/run/help.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/run/help.test.js~test7",
    "access": null,
    "description": "show show help",
    "lineNumber": 6
  },
  {
    "__docId__": 281,
    "kind": "testFile",
    "name": "src/lib/commands/run/index.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport command, { __RewireAPI__ as moduleRewireAPI } from './index';\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getOptions: sinon.stub(),\n    help: sinon.stub(),\n    run: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest.serial('should show help', async t => {\n  const { getOptions, help, run } = t.context.mocks;\n\n  const argv = 'some-argv';\n\n  getOptions.withArgs(argv).returns({ helpWanted: true });\n\n  await command(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.true(help.called);\n  t.false(run.called);\n});\n\ntest.serial('should run installer', async t => {\n  const { getOptions, help, run } = t.context.mocks;\n\n  const argv = 'some-argv';\n  const options = { some: 'options' };\n\n  getOptions.withArgs(argv).returns(options);\n\n  await command(argv);\n\n  t.true(getOptions.calledWith(argv));\n  t.false(help.called);\n  t.true(run.calledWith(options));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/index.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "testFile",
    "name": "src/lib/commands/run/options.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport { getOptions, __RewireAPI__ as moduleRewireAPI } from './options';\n\nconst helpData = {\n  argv: 'some-argv',\n  seeders: 'some-seeders',\n  dropdb: true,\n  help: false,\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    optionDefinitions: 'some option definitions',\n    commandLineArgs: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('should get user options from the cli', t => {\n  const { argv, seeders, dropdb, help } = helpData;\n\n  const { commandLineArgs, optionDefinitions } = t.context.mocks;\n\n  commandLineArgs.withArgs(optionDefinitions, { argv }).returns({\n    seeders,\n    dropdb,\n    help,\n  });\n\n  const expectedOptions = {\n    selectedSeeders: seeders,\n    dropDatabase: dropdb,\n    helpWanted: help,\n  };\n  const recivedOptions = getOptions(argv);\n\n  t.true(commandLineArgs.calledWith(optionDefinitions, { argv }));\n  t.deepEqual(recivedOptions, expectedOptions);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/options.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "src/lib/commands/run/options.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/commands/run/options.test.js~test8",
    "access": null,
    "description": "should get user options from the cli",
    "lineNumber": 32
  },
  {
    "__docId__": 284,
    "kind": "testFile",
    "name": "src/lib/commands/run/run-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport RunLogger, { __RewireAPI__ as moduleRewireAPI } from './run-logger';\n\nconst createMockedLogger = () => {\n  const logger = new RunLogger();\n\n  logger.spinner = {\n    start: sinon.stub(),\n    stop: sinon.stub(),\n    message: sinon.stub(),\n  };\n\n  return logger;\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    clui: { Spinner: sinon.stub() },\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n\n  sinon.stub(global.console, 'log');\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n\n  global.console.log.restore();\n});\n\ntest.serial('Should create a run-logger instance', t => {\n  const logger = new RunLogger();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest.serial('Should return observer', t => {\n  const logger = new RunLogger();\n\n  const observer = logger.asObserver();\n\n  t.is(typeof observer.next, 'function');\n  t.is(typeof observer.error, 'function');\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_START', t => {\n  const logger = createMockedLogger();\n\n  const type = 'MONGOOSE_CONNECT_START';\n\n  logger.next({ type });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledOnce);\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const type = 'MONGOOSE_CONNECT_SUCCESS';\n\n  logger.next({ type });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(\n    global.console.log.calledWith(\n      sinon.match(/Successfully connected to MongoDB/)\n    )\n  );\n});\n\ntest.serial('Should log MONGOOSE_DROP_START', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'MONGOOSE_DROP_START' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledOnce);\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log MONGOOSE_DROP_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'MONGOOSE_DROP_SUCCESS' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Database dropped/)));\n});\n\ntest.serial('Should log ALL_SEEDERS_START', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'ALL_SEEDERS_START' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Seeding Results/)));\n});\n\ntest.serial('Should log ALL_SEEDERS_FINISH', t => {\n  const logger = createMockedLogger();\n\n  logger.next({ type: 'ALL_SEEDERS_FINISH' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Done/)));\n});\n\ntest.serial('Should log SEEDER_START', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name' };\n\n  logger.next({ type: 'SEEDER_START', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(logger.spinner.message.calledWith(payload.name));\n  t.true(logger.spinner.start.calledOnce);\n});\n\ntest.serial('Should log SEEDER_SUCCESS', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name', results: { run: true, created: '10' } };\n\n  logger.next({ type: 'SEEDER_SUCCESS', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n  t.true(global.console.log.calledWith(sinon.match(payload.results.created)));\n});\n\ntest.serial('Should log SEEDER_SUCCESS with run=false', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name', results: { run: false, created: '0' } };\n\n  logger.next({ type: 'SEEDER_SUCCESS', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n  t.true(global.console.log.calledWith(sinon.match(payload.results.created)));\n});\n\ntest.serial('Should log MONGOOSE_CONNECT_ERROR', t => {\n  const logger = createMockedLogger();\n\n  logger.error({ type: 'MONGOOSE_CONNECT_ERROR' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(\n    global.console.log.calledWith(sinon.match(/Unable to connected to MongoDB/))\n  );\n});\n\ntest.serial('Should log MONGOOSE_DROP_ERROR', t => {\n  const logger = createMockedLogger();\n\n  logger.error({ type: 'MONGOOSE_DROP_ERROR' });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(/Unable to drop database/)));\n});\n\ntest.serial('Should log SEEDER_ERROR', t => {\n  const logger = createMockedLogger();\n\n  const payload = { name: 'some-name' };\n\n  logger.error({ type: 'SEEDER_ERROR', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.log.calledWith(sinon.match(payload.name)));\n});\n\ntest.serial('Should log error', t => {\n  sinon.stub(global.console, 'error');\n\n  const logger = createMockedLogger();\n\n  const payload = { error: 'some-error' };\n\n  logger.error({ type: 'some-type', payload });\n\n  t.true(logger.spinner.stop.calledOnce);\n  t.true(global.console.error.calledWith(payload.error));\n\n  global.console.error.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run-logger.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "src/lib/commands/run/run.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { mockImports, resetImports } from '../../utils/test-helpers';\n\nimport MdSeedRunner from '../../core/__mocks__/md-seed-runner';\nimport RunLogger from './__mocks__/run-logger';\n\nimport run, { __RewireAPI__ as moduleRewireAPI } from './run';\n\nconst userConfig = {\n  connect: sinon.stub().resolves(),\n  dropdb: sinon.stub().resolves(),\n  seedersList: 'some-seeders-list',\n};\n\nconst config = {\n  loadUserConfig: () => userConfig,\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    config,\n    MdSeedRunner,\n    RunLogger,\n    validateUserConfig: sinon.stub(),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest.serial('Should run', async t => {\n  const { validateUserConfig, MdSeedRunner, RunLogger } = t.context.mocks;\n\n  await run();\n\n  t.true(validateUserConfig.called);\n\n  t.true(MdSeedRunner.calledWith(userConfig));\n  t.true(\n    MdSeedRunner.prototype.run.calledWith({\n      selectedSeeders: [],\n      dropDatabase: false,\n    })\n  );\n  t.true(\n    MdSeedRunner.stubbedOvservable.subscribe.calledWith(\n      RunLogger.stubbedOvserver\n    )\n  );\n  t.true(MdSeedRunner.stubbedOvservable.toPromise.called);\n\n  t.true(RunLogger.called);\n  t.true(RunLogger.prototype.asObserver.called);\n});\n\ntest.serial('Should run with args', async t => {\n  const { validateUserConfig, MdSeedRunner, RunLogger } = t.context.mocks;\n\n  const selectedSeeders = ['some', 'seeders'];\n  const dropDatabase = true;\n\n  await run({ selectedSeeders, dropDatabase });\n\n  t.true(validateUserConfig.called);\n\n  t.true(MdSeedRunner.calledWith(userConfig));\n  t.true(\n    MdSeedRunner.prototype.run.calledWith({\n      selectedSeeders,\n      dropDatabase,\n    })\n  );\n  t.true(\n    MdSeedRunner.stubbedOvservable.subscribe.calledWith(\n      RunLogger.stubbedOvserver\n    )\n  );\n  t.true(MdSeedRunner.stubbedOvservable.toPromise.called);\n\n  t.true(RunLogger.called);\n  t.true(RunLogger.prototype.asObserver.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/commands/run/run.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "testFile",
    "name": "src/lib/core/installer-error.test.js",
    "content": "import test from 'ava';\n\nimport InstallerError from './installer-error';\n\ntest('should create error', t => {\n  const error = new InstallerError();\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with type', t => {\n  const type = 'some-type';\n  const error = new InstallerError({ type });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, type);\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with payload', t => {\n  const payload = { some: 'payload' };\n  const error = new InstallerError({ payload });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { ...payload, error: {} });\n});\n\ntest('should create error with inner error', t => {\n  const innerError = new Error('some-error');\n  const error = new InstallerError({ error: innerError });\n\n  t.is(error.name, 'InstallerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: innerError });\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer-error.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "src/lib/core/installer-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer-error.test.js~test9",
    "access": null,
    "description": "should create error",
    "lineNumber": 5
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "src/lib/core/installer-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer-error.test.js~test10",
    "access": null,
    "description": "should create error with type",
    "lineNumber": 13
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "src/lib/core/installer-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer-error.test.js~test11",
    "access": null,
    "description": "should create error with payload",
    "lineNumber": 22
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "src/lib/core/installer-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer-error.test.js~test12",
    "access": null,
    "description": "should create error with inner error",
    "lineNumber": 31
  },
  {
    "__docId__": 291,
    "kind": "testFile",
    "name": "src/lib/core/installer.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport path from 'path';\n\nimport Subject from '../../__mocks__/rxjs-subject';\nimport fs, {\n  alreadyExistsFilename,\n  alreadyExistsPath,\n  throwableMkdirPath,\n} from '../../__mocks__/fs';\nimport memFs, { store } from '../../__mocks__/mem-fs';\nimport memFsEditor, {\n  fs as memFsEditorFs,\n} from '../../__mocks__/mem-fs-editor';\n\nimport { defaultUserGeneratorConfig, systemSeederTemplate } from '../constants';\nimport { mockImports, resetImports } from '../utils/test-helpers';\n\nimport InstallerError from './installer-error';\n\nimport Installer, { __RewireAPI__ as moduleRewireAPI } from './installer';\n\nconst helpData = {\n  seedersFolder: 'seeders-folder',\n  customSeederTemplate: 'some-template.js',\n};\n\nconst defaultConfig = {\n  projectRoot: '/project/root',\n  userConfigExists: true,\n  userConfigFilename: 'config-filename.js',\n  userConfigFilepath: '/project/root/config-filename.js',\n  configTemplate: '/template/folder/config-template.js',\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    Subject,\n    fs,\n    memFs,\n    editor: memFsEditor,\n    config: { ...defaultConfig },\n    getObjectWithSelectedKeys: sinon.stub(),\n    normalizeSeederName: sinon.stub().returnsArg(0),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('Should create a installer instance', t => {\n  sinon.stub(Installer.prototype, '_initConfig');\n  sinon.stub(Installer.prototype, '_initMemFs');\n\n  const installer = new Installer();\n\n  t.truthy(installer._subject);\n  t.is(typeof installer.install, 'function');\n  t.true(\n    installer._initConfig.calledWith({\n      ...defaultUserGeneratorConfig,\n      customSeederTemplate: undefined,\n    })\n  );\n  t.true(installer._initMemFs.called);\n\n  Installer.prototype._initConfig.restore();\n  Installer.prototype._initMemFs.restore();\n});\n\ntest('Should create a installer instance with args', t => {\n  sinon.stub(Installer.prototype, '_initConfig');\n  sinon.stub(Installer.prototype, '_initMemFs');\n\n  const installer = new Installer({ ...helpData });\n\n  t.truthy(installer._subject);\n  t.is(typeof installer.install, 'function');\n  t.true(installer._initConfig.calledWith({ ...helpData }));\n  t.true(installer._initMemFs.called);\n\n  Installer.prototype._initConfig.restore();\n  Installer.prototype._initMemFs.restore();\n});\n\ntest('Should _initConfig', t => {\n  const context = {};\n  const _initConfig = Installer.prototype._initConfig.bind(context);\n\n  _initConfig({ ...helpData });\n\n  t.snapshot(context);\n});\n\ntest('Should _initConfig without customSeederTemplate', t => {\n  const context = {};\n  const _initConfig = Installer.prototype._initConfig.bind(context);\n\n  const config = { ...helpData };\n  delete config.customSeederTemplate;\n\n  _initConfig(config);\n\n  t.snapshot(context);\n});\n\ntest('Should _initMemFs', t => {\n  const { mocks } = t.context;\n\n  const context = {};\n  const _initMemFs = Installer.prototype._initMemFs.bind(context);\n\n  _initMemFs();\n\n  t.true(mocks.memFs.create.called);\n  t.true(mocks.editor.create.calledWith(store));\n  t.is(context._memFsEditor, memFsEditorFs);\n});\n\ntest('Should install', t => {\n  const context = {\n    _install: sinon.stub().resolves(),\n    _subject: { asObservable: () => 'observable' },\n  };\n  const install = Installer.prototype.install.bind(context);\n\n  const results = install();\n\n  t.is(results, 'observable');\n  t.true(context._install.called);\n});\n\ntest('Should getGeneratorConfig', t => {\n  const context = {\n    config: {\n      userSeedersFolderName: 'foldername',\n    },\n  };\n  const getGeneratorConfig = Installer.prototype.getGeneratorConfig.bind(\n    context\n  );\n\n  const expectedResults = {\n    seedersFolder: context.config.userSeedersFolderName,\n  };\n  const results = getGeneratorConfig();\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('Should getGeneratorConfig with customSeederTemplate', t => {\n  const context = {\n    config: {\n      userSeedersFolderName: 'foldername',\n      customSeederTemplateFilename: 'template-filename.js',\n    },\n  };\n  const getGeneratorConfig = Installer.prototype.getGeneratorConfig.bind(\n    context\n  );\n\n  const expectedResults = {\n    seedersFolder: context.config.userSeedersFolderName,\n    customSeederTemplate: context.config.customSeederTemplateFilename,\n  };\n  const results = getGeneratorConfig();\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('Should _install and success', async t => {\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().resolves(),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await _install();\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.true(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.true(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.true(context._subject.complete.called);\n  t.false(context._subject.error.called);\n});\n\ntest('Should _install and fail', async t => {\n  const error = new Error('some-error');\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().rejects(error),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await t.notThrowsAsync(() => _install());\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.false(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.false(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.false(context._subject.complete.called);\n  t.true(\n    context._subject.error.calledWith({ type: 'ERROR', payload: { error } })\n  );\n});\n\ntest('Should _install and fail with InstallerError', async t => {\n  const type = 'CREATE_SEEDERS_FOLDER_ERROR';\n  const payload = { some: 'data' };\n  const baseError = new Error('some-base-error');\n\n  const error = new InstallerError({ type, payload, error: baseError });\n  const context = {\n    _createCustomSeederTemplate: sinon.stub().resolves(),\n    _writeUserGeneratorConfigToPackageJson: sinon.stub().resolves(),\n    _createSeedersFolder: sinon.stub().rejects(error),\n    _writeUserConfig: sinon.stub().resolves(),\n    _subject: {\n      next: sinon.stub(),\n      complete: sinon.stub(),\n      error: sinon.stub(),\n    },\n  };\n  const _install = Installer.prototype._install.bind(context);\n\n  await _install();\n\n  t.true(context._createCustomSeederTemplate.called);\n  t.true(context._writeUserGeneratorConfigToPackageJson.called);\n  t.true(context._createSeedersFolder.called);\n  t.false(context._writeUserConfig.called);\n  t.true(context._subject.next.calledWith({ type: 'START' }));\n  t.false(context._subject.next.calledWith({ type: 'SUCCESS' }));\n  t.false(context._subject.complete.called);\n  t.true(\n    context._subject.error.calledWith({\n      type,\n      payload: { ...payload, error: baseError },\n    })\n  );\n});\n\ntest('Should _commitMemFsChanges', async t => {\n  const context = {\n    _memFsEditor: { commit: sinon.stub().callsArg(0) },\n  };\n  const _commitMemFsChanges = Installer.prototype._commitMemFsChanges.bind(\n    context\n  );\n\n  await _commitMemFsChanges();\n\n  t.true(context._memFsEditor.commit.called);\n});\n\ntest('Should _createCustomSeederTemplate and success', async t => {\n  const customSeederTemplateFilename = 'seeder-template.js';\n  const customSeederTemplatePath = `/some/${customSeederTemplateFilename}`;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrowsAsync(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      systemSeederTemplate,\n      customSeederTemplatePath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and skip because no custom seeder choosed', async t => {\n  const customSeederTemplateFilename = undefined;\n  const customSeederTemplatePath = undefined;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrows(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and skip because no the seeder template already exists', async t => {\n  const customSeederTemplateFilename = alreadyExistsFilename;\n  const customSeederTemplatePath = alreadyExistsPath;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  await t.notThrows(() => _createCustomSeederTemplate());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _createCustomSeederTemplate and fail', async t => {\n  const customSeederTemplateFilename = 'seeder-template.js';\n  const customSeederTemplatePath = `/some/${customSeederTemplateFilename}`;\n  const config = { customSeederTemplateFilename, customSeederTemplatePath };\n  const payload = { customSeederTemplateFilename, customSeederTemplatePath };\n\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _createCustomSeederTemplate = Installer.prototype._createCustomSeederTemplate.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(() =>\n    _createCustomSeederTemplate()\n  );\n\n  t.is(rejectionError.type, 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_NO_CUSTOM',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_CUSTOM_SEEDER_TEMPLATE_FILE_SUCCESS',\n      payload,\n    })\n  );\n  t.true(context._memFsEditor.copy.called);\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserGeneratorConfigToPackageJson and success', async t => {\n  const config = {\n    userPackageJsonPath: path.join(__dirname, './__mocks__/package.json'),\n  };\n  const generatorConfig = {\n    seedersFolder: '/some/folder',\n    customSeederTemplateFilename: 'some-filename.js',\n  };\n  const payload = {\n    packageJsonPath: config.userPackageJsonPath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { writeJSON: sinon.stub() },\n    getGeneratorConfig: () => generatorConfig,\n  };\n  const _writeUserGeneratorConfigToPackageJson = Installer.prototype._writeUserGeneratorConfigToPackageJson.bind(\n    context\n  );\n\n  await t.notThrowsAsync(() => _writeUserGeneratorConfigToPackageJson());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.writeJSON.calledWith(payload.packageJsonPath, {\n      mdSeed: generatorConfig,\n    })\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserGeneratorConfigToPackageJson and fail', async t => {\n  const config = {\n    userPackageJsonPath: path.join(__dirname, './__mocks__/package.json'),\n  };\n  const generatorConfig = {\n    seedersFolder: '/some/folder',\n    customSeederTemplateFilename: 'some-filename.js',\n  };\n  const payload = {\n    packageJsonPath: config.userPackageJsonPath,\n  };\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { writeJSON: sinon.stub() },\n    getGeneratorConfig: () => generatorConfig,\n  };\n  const _writeUserGeneratorConfigToPackageJson = Installer.prototype._writeUserGeneratorConfigToPackageJson.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(\n    _writeUserGeneratorConfigToPackageJson()\n  );\n\n  t.is(rejectionError.type, 'WRITE_USER_GENERETOR_CONFIG_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_GENERETOR_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(context._memFsEditor.writeJSON.called);\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _createSeedersFolder and success', async t => {\n  const { mocks } = t.context;\n  const folderpath = '/some/folder/path/folder';\n  const foldername = folderpath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  await t.notThrows(() => _createSeedersFolder());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.true(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _createSeedersFolder and skip', async t => {\n  const { mocks } = t.context;\n  const folderpath = alreadyExistsPath;\n  const foldername = alreadyExistsPath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  await t.notThrows(() => _createSeedersFolder());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.false(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _createSeedersFolder and fail', async t => {\n  const { mocks } = t.context;\n  const folderpath = throwableMkdirPath;\n  const foldername = throwableMkdirPath.split('/').pop();\n  const payload = { folderpath, foldername };\n  const config = {\n    userSeedersFolderPath: folderpath,\n    userSeedersFolderName: foldername,\n  };\n  const subject = new Subject();\n  const context = { _subject: subject, config };\n  const _createSeedersFolder = Installer.prototype._createSeedersFolder.bind(\n    context\n  );\n\n  const rejectionError = await t.throwsAsync(() => _createSeedersFolder());\n\n  t.is(rejectionError.type, 'CREATE_SEEDERS_FOLDER_ERROR');\n  t.deepEqual(rejectionError.payload, {\n    ...payload,\n    error: new Error('some-error'),\n  });\n  t.true(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SKIP_FOLDER_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'CREATE_SEEDERS_FOLDER_SUCCESS',\n      payload,\n    })\n  );\n  t.true(mocks.fs.existsSync.calledWith(folderpath));\n  t.true(mocks.fs.mkdirSync.calledWith(folderpath));\n});\n\ntest('Should _writeUserConfig and success', async t => {\n  const config = {\n    userConfigExists: false,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  await t.notThrowsAsync(() => _writeUserConfig());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      config.configTemplatePath,\n      config.userConfigFilepath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserConfig and skip', async t => {\n  const config = {\n    userConfigExists: true,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().resolves(),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  await t.notThrows(() => _writeUserConfig());\n\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.false(context._memFsEditor.copy.called);\n  t.false(context._commitMemFsChanges.called);\n});\n\ntest('Should _writeUserConfig and fail', async t => {\n  const config = {\n    userConfigExists: false,\n    userConfigFilename: 'filename.js',\n    userConfigFilepath: '/some/path/filename.js',\n    configTemplatePath: '/some/template.js',\n  };\n  const payload = {\n    fileExists: config.userConfigExists,\n    filename: config.userConfigFilename,\n    filepath: config.userConfigFilepath,\n  };\n  const subject = new Subject();\n  const error = new Error('some-error');\n  const context = {\n    _subject: subject,\n    config,\n    _commitMemFsChanges: sinon.stub().rejects(error),\n    _memFsEditor: { copy: sinon.stub() },\n  };\n  const _writeUserConfig = Installer.prototype._writeUserConfig.bind(context);\n\n  const rejectionError = await t.throwsAsync(() => _writeUserConfig());\n\n  t.is(rejectionError.type, 'WRITE_USER_CONFIG_ERROR');\n  t.deepEqual(rejectionError.payload, { ...payload, error });\n  t.true(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_START',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SKIP_FILE_EXISTS',\n      payload,\n    })\n  );\n  t.false(\n    subject.next.calledWith({\n      type: 'WRITE_USER_CONFIG_SUCCESS',\n      payload,\n    })\n  );\n  t.true(\n    context._memFsEditor.copy.calledWith(\n      config.configTemplatePath,\n      config.userConfigFilepath\n    )\n  );\n  t.true(context._commitMemFsChanges.called);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/installer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test13",
    "access": null,
    "description": "Should create a installer instance",
    "lineNumber": 58
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test14",
    "access": null,
    "description": "Should create a installer instance with args",
    "lineNumber": 78
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test15",
    "access": null,
    "description": "Should _initConfig",
    "lineNumber": 93
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test16",
    "access": null,
    "description": "Should _initConfig without customSeederTemplate",
    "lineNumber": 102
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test17",
    "access": null,
    "description": "Should _initMemFs",
    "lineNumber": 114
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test18",
    "access": null,
    "description": "Should install",
    "lineNumber": 127
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test19",
    "access": null,
    "description": "Should getGeneratorConfig",
    "lineNumber": 140
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "test20",
    "testId": 20,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test20",
    "access": null,
    "description": "Should getGeneratorConfig with customSeederTemplate",
    "lineNumber": 158
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test21",
    "access": null,
    "description": "Should _install and success",
    "lineNumber": 178
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test22",
    "access": null,
    "description": "Should _install and fail",
    "lineNumber": 204
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "test23",
    "testId": 23,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test23",
    "access": null,
    "description": "Should _install and fail with InstallerError",
    "lineNumber": 233
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test24",
    "access": null,
    "description": "Should _commitMemFsChanges",
    "lineNumber": 269
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "test25",
    "testId": 25,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test25",
    "access": null,
    "description": "Should _createCustomSeederTemplate and success",
    "lineNumber": 282
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "test26",
    "testId": 26,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test26",
    "access": null,
    "description": "Should _createCustomSeederTemplate and skip because no custom seeder choosed",
    "lineNumber": 334
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "test27",
    "testId": 27,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test27",
    "access": null,
    "description": "Should _createCustomSeederTemplate and skip because no the seeder template already exists",
    "lineNumber": 381
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test28",
    "access": null,
    "description": "Should _createCustomSeederTemplate and fail",
    "lineNumber": 428
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "test29",
    "testId": 29,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test29",
    "access": null,
    "description": "Should _writeUserGeneratorConfigToPackageJson and success",
    "lineNumber": 480
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "test30",
    "testId": 30,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test30",
    "access": null,
    "description": "Should _writeUserGeneratorConfigToPackageJson and fail",
    "lineNumber": 525
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "test31",
    "testId": 31,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test31",
    "access": null,
    "description": "Should _createSeedersFolder and success",
    "lineNumber": 571
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "test32",
    "testId": 32,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test32",
    "access": null,
    "description": "Should _createSeedersFolder and skip",
    "lineNumber": 610
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "test33",
    "testId": 33,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test33",
    "access": null,
    "description": "Should _createSeedersFolder and fail",
    "lineNumber": 649
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "test34",
    "testId": 34,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test34",
    "access": null,
    "description": "Should _writeUserConfig and success",
    "lineNumber": 693
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "test35",
    "testId": 35,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test35",
    "access": null,
    "description": "Should _writeUserConfig and skip",
    "lineNumber": 743
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "test36",
    "testId": 36,
    "memberof": "src/lib/core/installer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/installer.test.js~test36",
    "access": null,
    "description": "Should _writeUserConfig and fail",
    "lineNumber": 788
  },
  {
    "__docId__": 316,
    "kind": "testFile",
    "name": "src/lib/core/md-seed-runner-error.test.js",
    "content": "import test from 'ava';\n\nimport MdSeedRunnerError from './md-seed-runner-error';\n\ntest('should create error', t => {\n  const error = new MdSeedRunnerError();\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with type', t => {\n  const type = 'some-type';\n  const error = new MdSeedRunnerError({ type });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, type);\n  t.deepEqual(error.payload, { error: {} });\n});\n\ntest('should create error with payload', t => {\n  const payload = { some: 'payload' };\n  const error = new MdSeedRunnerError({ payload });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { ...payload, error: {} });\n});\n\ntest('should create error with inner error', t => {\n  const innerError = new Error('some-error');\n  const error = new MdSeedRunnerError({ error: innerError });\n\n  t.is(error.name, 'MdSeedRunnerError');\n  t.is(error.type, '');\n  t.deepEqual(error.payload, { error: innerError });\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner-error.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "test37",
    "testId": 37,
    "memberof": "src/lib/core/md-seed-runner-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner-error.test.js~test37",
    "access": null,
    "description": "should create error",
    "lineNumber": 5
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "test38",
    "testId": 38,
    "memberof": "src/lib/core/md-seed-runner-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner-error.test.js~test38",
    "access": null,
    "description": "should create error with type",
    "lineNumber": 13
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "test39",
    "testId": 39,
    "memberof": "src/lib/core/md-seed-runner-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner-error.test.js~test39",
    "access": null,
    "description": "should create error with payload",
    "lineNumber": 22
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "test40",
    "testId": 40,
    "memberof": "src/lib/core/md-seed-runner-error.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner-error.test.js~test40",
    "access": null,
    "description": "should create error with inner error",
    "lineNumber": 31
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "src/lib/core/md-seed-runner.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport { toArray } from 'rxjs/operators';\n\nimport { mockImports, resetImports } from '../utils/test-helpers';\n\nimport MdSeedRunnerError from './md-seed-runner-error';\n\nimport MdSeedRunner, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './md-seed-runner';\n\nconst helpData = {\n  connect: sinon.stub().resolves(),\n  dropdb: sinon.stub().resolves(),\n  seedersList: {\n    Users: 'users-seeder',\n    Posts: 'posts-seeder',\n  },\n};\n\ntest.beforeEach('mock imports', t => {\n  const mocks = {\n    getObjectWithSelectedKeys: sinon.stub(),\n    normalizeSeederName: sinon.stub().returnsArg(0),\n  };\n\n  t.context = { mocks };\n\n  mockImports({ moduleRewireAPI, mocks });\n});\n\ntest.afterEach.always('unmock imports', t => {\n  const imports = Object.keys(t.context.mocks);\n\n  resetImports({ moduleRewireAPI, imports });\n});\n\ntest('Should create a run-logger instance', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  t.is(seedRunner.connect, helpData.connect);\n  t.is(seedRunner.dropdb, helpData.dropdb);\n  t.is(seedRunner.seedersList, helpData.seedersList);\n  t.is(typeof seedRunner.run, 'function');\n});\n\ntest('Should run', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_run');\n\n  const observable = seedRunner.run();\n\n  t.true(\n    seedRunner._run.calledWith({ selectedSeeders: [], dropDatabase: false })\n  );\n  t.is(typeof observable.subscribe, 'function');\n});\n\ntest('Should run with args', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_run');\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  const observable = seedRunner.run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._run.calledWith({ selectedSeeders, dropDatabase }));\n  t.is(typeof observable.subscribe, 'function');\n});\n\ntest('Should _run', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').resolves();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = false;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.true(seedRunner._runSeeders.calledWith(selectedSeeders));\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and drop database', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').resolves();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.true(seedRunner._runSeeders.calledWith(selectedSeeders));\n  t.true(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and fail', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon.stub(seedRunner, '_connectToMongodb').rejects();\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .catch(error => t.snapshot(error));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.false(seedRunner._runSeeders.called);\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _run and fail with type and payload', async t => {\n  t.plan(4);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const error = new MdSeedRunnerError({\n    type: 'some-type',\n    payload: { some: 'data' },\n    error: new Error('some error message'),\n  });\n\n  sinon.stub(seedRunner, '_connectToMongodb').rejects(error);\n  sinon.stub(seedRunner, '_dropDatabase').resolves();\n  sinon.stub(seedRunner, '_runSeeders').resolves();\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n  const dropDatabase = true;\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .catch(error => t.snapshot(error));\n\n  await seedRunner._run({ selectedSeeders, dropDatabase });\n\n  t.true(seedRunner._connectToMongodb.called);\n  t.false(seedRunner._runSeeders.called);\n  t.false(seedRunner._dropDatabase.called);\n});\n\ntest('Should _connectToMongodb', async t => {\n  t.plan(2);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._connectToMongodb();\n\n  seedRunner._subject.complete();\n\n  t.true(helpData.connect.called);\n});\n\ntest('Should _connectToMongodb and fail', async t => {\n  t.plan(3);\n\n  const data = {\n    ...helpData,\n    connect: sinon.stub().rejects(new Error('some-error')),\n  };\n\n  const seedRunner = new MdSeedRunner({ ...data });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._connectToMongodb();\n  } catch (error) {\n    t.snapshot(error, 'connect to mongodb error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(data.connect.called);\n});\n\ntest('Should _dropDatabase', async t => {\n  t.plan(2);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results));\n\n  await seedRunner._dropDatabase();\n\n  seedRunner._subject.complete();\n\n  t.true(helpData.dropdb.called);\n});\n\ntest('Should _dropDatabase and fail', async t => {\n  t.plan(3);\n\n  const data = {\n    ...helpData,\n    dropdb: sinon.stub().rejects(new Error('some-error')),\n  };\n\n  const seedRunner = new MdSeedRunner({ ...data });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._dropDatabase();\n  } catch (error) {\n    t.snapshot(error, 'dropdb error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(data.dropdb.called);\n});\n\ntest('Should _runSeeders', async t => {\n  t.plan(3);\n\n  const selectedSeeders = Object.keys(helpData.seedersList);\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  sinon\n    .stub(seedRunner, '_loadSelectedSeeders')\n    .withArgs(selectedSeeders)\n    .returns(selectedSeeders);\n  sinon.stub(seedRunner, '_runSeeder').resolves();\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  await seedRunner._runSeeders(selectedSeeders);\n\n  seedRunner._subject.complete();\n\n  t.true(seedRunner._loadSelectedSeeders.calledWith(selectedSeeders));\n  t.snapshot(seedRunner._runSeeder.args, '_runSeeder args');\n});\n\ntest('Should _runSeeder', async t => {\n  t.plan(3);\n\n  const name = 'User';\n  const Seeder = sinon.stub();\n  Seeder.prototype.seed = sinon.stub().resolves('some-results');\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  await seedRunner._runSeeder({ Seeder, name });\n\n  seedRunner._subject.complete();\n\n  t.true(Seeder.called);\n  t.true(Seeder.prototype.seed.called);\n});\n\ntest('Should _runSeeder and fail', async t => {\n  t.plan(4);\n\n  const name = 'User';\n  const Seeder = sinon.stub();\n  Seeder.prototype.seed = sinon.stub().rejects(new Error('some-error'));\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._subject\n    .asObservable()\n    .pipe(toArray())\n    .toPromise()\n    .then(results => t.snapshot(results, 'observable results'));\n\n  try {\n    await seedRunner._runSeeder({ Seeder, name });\n  } catch (error) {\n    t.snapshot(error, '_runSeeder error');\n  }\n\n  seedRunner._subject.complete();\n\n  t.true(Seeder.called);\n  t.true(Seeder.prototype.seed.called);\n});\n\ntest('should _loadSelectedSeeders with no args', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const selectedSeeders = seedRunner._loadSelectedSeeders();\n\n  t.is(selectedSeeders, helpData.seedersList);\n});\n\ntest('should _loadSelectedSeeders with empty array', t => {\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  const selectedSeeders = seedRunner._loadSelectedSeeders([]);\n\n  t.is(selectedSeeders, helpData.seedersList);\n});\n\ntest('should _loadSelectedSeeders', t => {\n  const { getObjectWithSelectedKeys } = t.context.mocks;\n\n  const seedRunner = new MdSeedRunner({ ...helpData });\n\n  seedRunner._loadSelectedSeeders(['User']);\n\n  t.true(getObjectWithSelectedKeys.calledWith(helpData.seedersList, ['User']));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/md-seed-runner.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "test41",
    "testId": 41,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test41",
    "access": null,
    "description": "Should create a run-logger instance",
    "lineNumber": 39
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "test42",
    "testId": 42,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test42",
    "access": null,
    "description": "Should run",
    "lineNumber": 48
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "test43",
    "testId": 43,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test43",
    "access": null,
    "description": "Should run with args",
    "lineNumber": 61
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "test44",
    "testId": 44,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test44",
    "access": null,
    "description": "Should _run",
    "lineNumber": 75
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "test45",
    "testId": 45,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test45",
    "access": null,
    "description": "Should _run and drop database",
    "lineNumber": 100
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "test46",
    "testId": 46,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test46",
    "access": null,
    "description": "Should _run and fail",
    "lineNumber": 125
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "test47",
    "testId": 47,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test47",
    "access": null,
    "description": "Should _run and fail with type and payload",
    "lineNumber": 150
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "test48",
    "testId": 48,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test48",
    "access": null,
    "description": "Should _connectToMongodb",
    "lineNumber": 181
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "test49",
    "testId": 49,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test49",
    "access": null,
    "description": "Should _connectToMongodb and fail",
    "lineNumber": 199
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "test50",
    "testId": 50,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test50",
    "access": null,
    "description": "Should _dropDatabase",
    "lineNumber": 226
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "test51",
    "testId": 51,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test51",
    "access": null,
    "description": "Should _dropDatabase and fail",
    "lineNumber": 244
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "test52",
    "testId": 52,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test52",
    "access": null,
    "description": "Should _runSeeders",
    "lineNumber": 271
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "test53",
    "testId": 53,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test53",
    "access": null,
    "description": "Should _runSeeder",
    "lineNumber": 298
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "test54",
    "testId": 54,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test54",
    "access": null,
    "description": "Should _runSeeder and fail",
    "lineNumber": 321
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "test55",
    "testId": 55,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test55",
    "access": null,
    "description": "should _loadSelectedSeeders with no args",
    "lineNumber": 348
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "test56",
    "testId": 56,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test56",
    "access": null,
    "description": "should _loadSelectedSeeders with empty array",
    "lineNumber": 356
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "test57",
    "testId": 57,
    "memberof": "src/lib/core/md-seed-runner.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/md-seed-runner.test.js~test57",
    "access": null,
    "description": "should _loadSelectedSeeders",
    "lineNumber": 364
  },
  {
    "__docId__": 339,
    "kind": "testFile",
    "name": "src/lib/core/seeder-generator.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\nimport path from 'path';\n\nimport SeederGenerator, {\n  __RewireAPI__ as moduleRewireAPI,\n} from './seeder-generator';\n\nconst helperData = {\n  name: 'some-name',\n  seederName: 'SomeName',\n  seederFileName: 'some-name.seeder.js',\n  seederFilePath: 'some/path/some-name.seeder.js',\n  seederFileRelativePath: 'some/relative-path/some-name.seeder.js',\n  seederTemplate: 'some template',\n  userSeedersFolderPath: 'some/path/for/seeders',\n  userSeedersFolderName: 'some-folder-name',\n};\n\ntest('should create a new instance of SeederGenerator', t => {\n  const createStubs = () => {\n    sinon.stub(SeederGenerator.prototype, '_initOptions');\n    sinon.stub(SeederGenerator.prototype, '_initMemFs');\n    sinon.stub(SeederGenerator.prototype, '_initName');\n  };\n  const restoreStubs = () => {\n    SeederGenerator.prototype._initOptions.restore();\n    SeederGenerator.prototype._initMemFs.restore();\n    SeederGenerator.prototype._initName.restore();\n  };\n\n  createStubs();\n\n  const { name, seederTemplate, userSeedersFolderPath } = helperData;\n\n  const generator = new SeederGenerator({\n    name,\n    seederTemplate,\n    userSeedersFolderPath,\n  });\n\n  t.true(\n    generator._initOptions.calledWith({\n      seederTemplate,\n      userSeedersFolderPath,\n    })\n  );\n  t.true(generator._initMemFs.called);\n  t.true(generator._initName.calledWith(name));\n\n  restoreStubs();\n});\n\ntest('should generate Seeder', async t => {\n  const { seederFileRelativePath } = helperData;\n\n  const context = {\n    seederFileRelativePath,\n    _validateSeederFileNotExists: sinon.stub(),\n    _copySeederTemplate: sinon.stub(),\n    _commitMemFsChanges: sinon.stub().resolves(),\n  };\n\n  const result = await SeederGenerator.prototype.generate.call(context);\n\n  t.true(context._validateSeederFileNotExists.called);\n  t.true(context._copySeederTemplate.called);\n  t.true(context._commitMemFsChanges.called);\n\n  t.is(result, context.seederFileRelativePath);\n});\n\ntest('should init options', t => {\n  const createStubs = ({ getFolderNameFromPath }) => {\n    moduleRewireAPI.__Rewire__('getFolderNameFromPath', getFolderNameFromPath);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('getFolderNameFromPath');\n  };\n\n  const {\n    seederTemplate,\n    userSeedersFolderPath,\n    userSeedersFolderName,\n  } = helperData;\n\n  const getFolderNameFromPath = sinon\n    .stub()\n    .withArgs(userSeedersFolderPath)\n    .returns(userSeedersFolderName);\n\n  createStubs({ getFolderNameFromPath });\n\n  const context = {};\n\n  SeederGenerator.prototype._initOptions.call(context, {\n    seederTemplate,\n    userSeedersFolderPath,\n  });\n\n  t.true(getFolderNameFromPath.calledWith(userSeedersFolderPath));\n  t.deepEqual(context, {\n    options: {\n      seederTemplate,\n      userSeedersFolderName,\n      userSeedersFolderPath,\n    },\n  });\n\n  restoreStubs();\n});\n\ntest('should init memFs', t => {\n  const createStubs = ({ memFs, editor }) => {\n    moduleRewireAPI.__Rewire__('memFs', memFs);\n    moduleRewireAPI.__Rewire__('editor', editor);\n  };\n  const restoreStubs = () => {\n    moduleRewireAPI.__ResetDependency__('memFs');\n    moduleRewireAPI.__ResetDependency__('editor');\n  };\n\n  const store = 'some store';\n  const fs = 'some fs';\n\n  const memFs = { create: sinon.stub().returns(store) };\n  const editor = {\n    create: sinon\n      .stub()\n      .withArgs(store)\n      .returns(fs),\n  };\n\n  createStubs({ memFs, editor });\n\n  const context = {};\n\n  SeederGenerator.prototype._initMemFs.call(context);\n\n  t.true(memFs.create.called);\n  t.true(editor.create.calledWith(store));\n  t.deepEqual(context, { fs });\n\n  restoreStubs();\n});\n\ntest('should init name', t => {\n  const {\n    name,\n    seederName,\n    seederFileName,\n    userSeedersFolderPath,\n    userSeedersFolderName,\n  } = helperData;\n\n  const seederFilePath = path.join(userSeedersFolderPath, seederFileName);\n  const seederFileRelativePath = path.join(\n    userSeedersFolderName,\n    seederFileName\n  );\n\n  const context = { options: { userSeedersFolderPath, userSeedersFolderName } };\n  const expectedContext = Object.assign({}, context, {\n    name,\n    seederName,\n    seederFileName,\n    seederFilePath,\n    seederFileRelativePath,\n  });\n\n  SeederGenerator.prototype._initName.call(context, name);\n\n  t.deepEqual(context, expectedContext);\n});\n\ntest('_validateSeederFileNotExists should throw error when seeder file are already exists', t => {\n  const { seederFilePath, seederFileRelativePath } = helperData;\n\n  const fs = { exists: () => true };\n  const context = { fs, seederFilePath, seederFileRelativePath };\n\n  t.throws(\n    () => SeederGenerator.prototype._validateSeederFileNotExists.call(context),\n    Error\n  );\n});\n\ntest('_validateSeederFileNotExists should not throw error when seeder file are not exists', t => {\n  const { seederFilePath, seederFileRelativePath } = helperData;\n\n  const fs = { exists: () => false };\n  const context = { fs, seederFilePath, seederFileRelativePath };\n\n  t.notThrows(() =>\n    SeederGenerator.prototype._validateSeederFileNotExists.call(context)\n  );\n});\n\ntest('should commit memFs changes', async t => {\n  const fs = { commit: sinon.stub().callsArg(0) };\n\n  const context = { fs };\n\n  await SeederGenerator.prototype._commitMemFsChanges.call(context);\n\n  t.true(fs.commit.called);\n});\n\ntest('should copy seeder template', async t => {\n  const { seederName, seederTemplate, seederFilePath } = helperData;\n\n  const fs = { copyTpl: sinon.spy() };\n  const context = {\n    fs,\n    seederName,\n    seederFilePath,\n    options: { seederTemplate },\n  };\n\n  SeederGenerator.prototype._copySeederTemplate.call(context);\n\n  t.true(fs.copyTpl.calledWith(seederTemplate, seederFilePath, { seederName }));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/core/seeder-generator.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "test58",
    "testId": 58,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test58",
    "access": null,
    "description": "should create a new instance of SeederGenerator",
    "lineNumber": 20
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "test59",
    "testId": 59,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test59",
    "access": null,
    "description": "should generate Seeder",
    "lineNumber": 54
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "test60",
    "testId": 60,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test60",
    "access": null,
    "description": "should init options",
    "lineNumber": 73
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "test61",
    "testId": 61,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test61",
    "access": null,
    "description": "should init memFs",
    "lineNumber": 113
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "test62",
    "testId": 62,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test62",
    "access": null,
    "description": "should init name",
    "lineNumber": 147
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "test63",
    "testId": 63,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test63",
    "access": null,
    "description": "_validateSeederFileNotExists should throw error when seeder file are already exists",
    "lineNumber": 176
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "test64",
    "testId": 64,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test64",
    "access": null,
    "description": "_validateSeederFileNotExists should not throw error when seeder file are not exists",
    "lineNumber": 188
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "test65",
    "testId": 65,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test65",
    "access": null,
    "description": "should commit memFs changes",
    "lineNumber": 199
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "test66",
    "testId": 66,
    "memberof": "src/lib/core/seeder-generator.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/core/seeder-generator.test.js~test66",
    "access": null,
    "description": "should copy seeder template",
    "lineNumber": 209
  },
  {
    "__docId__": 349,
    "kind": "testFile",
    "name": "src/lib/utils/base-logger.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport BaseLogger from './base-logger';\n\ntest('Should create a installer-logger instance', t => {\n  const logger = new BaseLogger();\n\n  logger.next();\n  logger.error();\n  logger.complete();\n\n  t.is(typeof logger.asObserver, 'function');\n});\n\ntest('Should return observer', t => {\n  const context = {\n    next: sinon.stub(),\n    error: sinon.stub(),\n    complete: sinon.stub(),\n  };\n\n  const observer = BaseLogger.prototype.asObserver.call(context);\n\n  const nextArgs = ['some', 'args', 'next'];\n  const errorArgs = ['some', 'args', 'error'];\n  const completeArgs = ['some', 'args', 'complete'];\n\n  observer.next(...nextArgs);\n  observer.error(...errorArgs);\n  observer.complete(...completeArgs);\n\n  t.true(context.next.calledWith(...nextArgs));\n  t.true(context.error.calledWith(...errorArgs));\n  t.true(context.complete.calledWith(...completeArgs));\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/base-logger.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "test67",
    "testId": 67,
    "memberof": "src/lib/utils/base-logger.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/base-logger.test.js~test67",
    "access": null,
    "description": "Should create a installer-logger instance",
    "lineNumber": 6
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "test68",
    "testId": 68,
    "memberof": "src/lib/utils/base-logger.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/base-logger.test.js~test68",
    "access": null,
    "description": "Should return observer",
    "lineNumber": 16
  },
  {
    "__docId__": 352,
    "kind": "testFile",
    "name": "src/lib/utils/helpers.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport { ExitCodes } from './constants';\nimport {\n  getFolderNameFromPath,\n  getObjectWithSelectedKeys,\n  validateSeedersFolderName,\n  validateSeederTemplatePath,\n  validateUserConfig,\n  exit,\n  __RewireAPI__ as moduleRewireAPI,\n} from './helpers';\n\ntest('should get folder name from path', t => {\n  t.is(getFolderNameFromPath('some/path/with/folder'), 'folder');\n});\n\ntest('should get similar object with the selected keys', t => {\n  const testObj = {\n    key1: '',\n    key2: '',\n    key3: '',\n  };\n\n  const results = getObjectWithSelectedKeys(testObj, ['key1', 'key3']);\n  const expectedResults = { key1: testObj.key1, key3: testObj.key3 };\n\n  t.deepEqual(results, expectedResults);\n});\n\ntest('should validate seeders folder name', t => {\n  t.true(validateSeedersFolderName('folder-name'));\n  t.true(validateSeedersFolderName('sed'));\n  t.false(validateSeedersFolderName('se'));\n  t.false(validateSeedersFolderName('   se  '));\n  t.false(validateSeedersFolderName());\n});\n\ntest('should validate seeder template path', t => {\n  t.true(validateSeederTemplatePath('file-name.js'));\n  t.true(validateSeederTemplatePath('sedsed'));\n  t.false(validateSeederTemplatePath('abcde'));\n  t.false(validateSeederTemplatePath('   abcde  '));\n  t.false(validateSeederTemplatePath());\n});\n\ntest('should not throw error if user config exists', async t => {\n  moduleRewireAPI.__Rewire__('config', { userConfigExists: true });\n\n  await t.notThrows(validateUserConfig);\n\n  moduleRewireAPI.__ResetDependency__('config');\n});\n\ntest('should throw error if user config not exists', async t => {\n  moduleRewireAPI.__Rewire__('config', { userConfigExists: false });\n\n  await t.throws(validateUserConfig);\n\n  moduleRewireAPI.__ResetDependency__('config');\n});\n\ntest('should exit with success code', async t => {\n  sinon.stub(process, 'exit');\n  sinon.stub(console, 'error');\n\n  exit();\n\n  t.true(process.exit.calledWith(ExitCodes.Success));\n  t.false(console.error.called);\n\n  process.exit.restore();\n  console.error.restore();\n});\n\ntest('should exit with error code when passing error', async t => {\n  sinon.stub(process, 'exit');\n  sinon.stub(console, 'error');\n\n  const error = new Error('some error');\n\n  exit(error);\n\n  t.true(process.exit.calledWith(ExitCodes.Error));\n  t.true(console.error.calledWith(error));\n\n  process.exit.restore();\n  console.error.restore();\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/helpers.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "test69",
    "testId": 69,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test69",
    "access": null,
    "description": "should get folder name from path",
    "lineNumber": 15
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "test70",
    "testId": 70,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test70",
    "access": null,
    "description": "should get similar object with the selected keys",
    "lineNumber": 19
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "test71",
    "testId": 71,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test71",
    "access": null,
    "description": "should validate seeders folder name",
    "lineNumber": 32
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "test72",
    "testId": 72,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test72",
    "access": null,
    "description": "should validate seeder template path",
    "lineNumber": 40
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "test73",
    "testId": 73,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test73",
    "access": null,
    "description": "should not throw error if user config exists",
    "lineNumber": 48
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "test74",
    "testId": 74,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test74",
    "access": null,
    "description": "should throw error if user config not exists",
    "lineNumber": 56
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "test75",
    "testId": 75,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test75",
    "access": null,
    "description": "should exit with success code",
    "lineNumber": 64
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "test76",
    "testId": 76,
    "memberof": "src/lib/utils/helpers.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/helpers.test.js~test76",
    "access": null,
    "description": "should exit with error code when passing error",
    "lineNumber": 77
  },
  {
    "__docId__": 361,
    "kind": "testFile",
    "name": "src/lib/utils/seeder.test.js",
    "content": "import test from 'ava';\nimport sinon from 'sinon';\n\nimport Seeder from './seeder';\n\ntest('should throw error when trying to create new instance of Seeder', t => {\n  t.throws(() => new Seeder(), TypeError);\n});\n\ntest('should throw error if not implementing run method', t => {\n  class MySeeder extends Seeder {}\n\n  t.throws(() => new MySeeder(), TypeError);\n});\n\ntest('should throw error when running the base run method', async t => {\n  await t.throwsAsync(() => Seeder.prototype.run(), TypeError);\n});\n\ntest('async shouldRun method need to return true', async t => {\n  t.true(await Seeder.prototype.shouldRun());\n});\n\ntest('async beforeRun need to return promise', async t => {\n  await Seeder.prototype.beforeRun();\n  t.pass();\n});\n\ntest('getStats should return empty stats when not providing results args', t => {\n  const acctual = Seeder.prototype.getStats();\n  const excepted = { run: false, created: 0 };\n\n  t.deepEqual(acctual, excepted);\n});\n\ntest('getStats should return stats when providing results args', t => {\n  const fakedResults = ['', '', '', '', '', ''];\n  const acctual = Seeder.prototype.getStats(fakedResults);\n  const excepted = { run: true, created: fakedResults.length };\n\n  t.deepEqual(acctual, excepted);\n});\n\ntest('static extend method should create a new class based on the Seeder class with the given methods', async t => {\n  const MySeeder = Seeder.extend({\n    run: sinon.stub().returns(Promise.resolve('run work')),\n  });\n\n  const baseClassName = Object.getPrototypeOf(MySeeder.prototype.constructor)\n    .name;\n\n  t.is(baseClassName, 'Seeder');\n  t.is(await MySeeder.prototype.run(), 'run work');\n});\n\ntest('static extend method should create a new class based on the Seeder class without methods', async t => {\n  const MySeeder = Seeder.extend();\n\n  MySeeder.prototype.run = sinon.stub().returns(Promise.resolve('run work'));\n\n  const baseClassName = Object.getPrototypeOf(MySeeder.prototype.constructor)\n    .name;\n\n  t.is(baseClassName, 'Seeder');\n  t.is(await MySeeder.prototype.run(), 'run work');\n});\n\ntest('seed method should run seeder if shouldRun returns true', async t => {\n  const fakedResults = ['', '', '', '', '', ''];\n\n  const shouldRun = sinon.stub().returns(Promise.resolve(true));\n  const beforeRun = sinon.stub().returns(Promise.resolve());\n  const run = sinon.stub().returns(Promise.resolve(fakedResults));\n\n  const MySeeder = Seeder.extend({ shouldRun, beforeRun, run });\n\n  const mySeeder = new MySeeder();\n\n  sinon.spy(mySeeder, 'getStats');\n\n  const acctualResults = await mySeeder.seed();\n  const exceptedResults = { run: true, created: fakedResults.length };\n\n  t.true(beforeRun.calledBefore(shouldRun));\n  t.true(shouldRun.calledBefore(run));\n  t.true(run.called);\n  t.true(mySeeder.getStats.calledWith(fakedResults));\n  t.deepEqual(acctualResults, exceptedResults);\n});\n\ntest('seed method should not run seeder if shouldRun returns false', async t => {\n  const fakedResults = ['', '', '', '', '', ''];\n\n  const shouldRun = sinon.stub().returns(Promise.resolve(false));\n  const beforeRun = sinon.stub().returns(Promise.resolve());\n  const run = sinon.stub().returns(Promise.resolve(fakedResults));\n\n  const MySeeder = Seeder.extend({ shouldRun, beforeRun, run });\n\n  const mySeeder = new MySeeder();\n\n  sinon.spy(mySeeder, 'getStats');\n\n  const acctualResults = await mySeeder.seed();\n  const exceptedResults = { run: false, created: 0 };\n\n  t.true(beforeRun.calledBefore(shouldRun));\n  t.true(shouldRun.called);\n  t.true(run.notCalled);\n  t.true(mySeeder.getStats.calledAfter(shouldRun));\n  t.deepEqual(acctualResults, exceptedResults);\n});\n",
    "static": true,
    "longname": "/home/travis/build/sharvit/mongoose-data-seed/src/lib/utils/seeder.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "test77",
    "testId": 77,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test77",
    "access": null,
    "description": "should throw error when trying to create new instance of Seeder",
    "lineNumber": 6
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "test78",
    "testId": 78,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test78",
    "access": null,
    "description": "should throw error if not implementing run method",
    "lineNumber": 10
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "test79",
    "testId": 79,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test79",
    "access": null,
    "description": "should throw error when running the base run method",
    "lineNumber": 16
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "test80",
    "testId": 80,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test80",
    "access": null,
    "description": "async shouldRun method need to return true",
    "lineNumber": 20
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "test81",
    "testId": 81,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test81",
    "access": null,
    "description": "async beforeRun need to return promise",
    "lineNumber": 24
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "test82",
    "testId": 82,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test82",
    "access": null,
    "description": "getStats should return empty stats when not providing results args",
    "lineNumber": 29
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "test83",
    "testId": 83,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test83",
    "access": null,
    "description": "getStats should return stats when providing results args",
    "lineNumber": 36
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "test84",
    "testId": 84,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test84",
    "access": null,
    "description": "static extend method should create a new class based on the Seeder class with the given methods",
    "lineNumber": 44
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "test85",
    "testId": 85,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test85",
    "access": null,
    "description": "static extend method should create a new class based on the Seeder class without methods",
    "lineNumber": 56
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "test86",
    "testId": 86,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test86",
    "access": null,
    "description": "seed method should run seeder if shouldRun returns true",
    "lineNumber": 68
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "test87",
    "testId": 87,
    "memberof": "src/lib/utils/seeder.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/utils/seeder.test.js~test87",
    "access": null,
    "description": "seed method should not run seeder if shouldRun returns false",
    "lineNumber": 91
  }
]